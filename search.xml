<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[介绍下StorIOSQLite到RxJava]]></title>
      <url>http://dannyhe.wang/2017/03/31/think-about-storio/</url>
      <content type="html"><![CDATA[<h2 id="storio"><a href="#storio" class="headerlink" title="storio"></a>storio</h2><p><code>storio</code>是github上的<a href="https://github.com/pushtorefresh/storio" target="_blank" rel="external">开源项目</a>,它用来操作<code>SQLiteDatabase</code>和 <code>ContentResolver</code>的操作进行封装,提供更简单更强大的api.我们项目最近从<code>xutils3</code>转换为<code>StorIOSQLite</code>,说说对它的体验和它是如何使用<code>RxJava</code>进行封装.</p>
<h3 id="storio是通过预先代码生成进行实体类的赋值"><a href="#storio是通过预先代码生成进行实体类的赋值" class="headerlink" title="storio是通过预先代码生成进行实体类的赋值"></a>storio是通过预先代码生成进行实体类的赋值</h3><p>通过<code>SQLiteTypeMapping</code>提供实体的三种<code>Resolver</code>: </p>
<ol>
<li>PutResolver </li>
<li>GetResolver</li>
<li>DeleteResolver</li>
</ol>
<p>也就是分别对应我们在进行API操作时</p>
<ol>
<li>将实体转换为数据库数据(InsertQuery,UpdateQuery…)</li>
<li>将数据库数据(Cursor)装换成实体对象</li>
<li>如何执行删除操作</li>
</ol>
<p>常规的<code>Resolver</code>只要我在实体类中使用它的<code>Annotation Processor</code>便会自动生成。</p>
<blockquote>
<p>什么时候需要自定义呢?</p>
</blockquote>
<p>复杂实体对象的时候(连表查询),因为<code>storio</code>是不关心具体实体类的,它只关心如何将实体和数据库操作建立起关系<br>比如文档中的<a href="https://github.com/pushtorefresh/storio/blob/master/storio-sample-app/src/main/java/com/pushtorefresh/storio/sample/db/resolvers/UserWithTweetsGetResolver.java" target="_blank" rel="external">UserWithTweetsGetResolver.java</a><br><a id="more"></a></p>
<blockquote>
<p>借鉴xutils利用<code>HashMap</code>来定义通用的读取实体</p>
</blockquote>
<figure class="highlight java"><figcaption><span>DbModel.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.text.TextUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DbModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * key: columnName</div><div class="line">     * value: valueStr</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> HashMap&lt;String, String&gt; dataMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String columnName)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dataMap.get(columnName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String columnName)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Integer.valueOf(dataMap.get(columnName));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(String columnName)</span> </span>&#123;</div><div class="line">        String value = dataMap.get(columnName);</div><div class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> value.length() == <span class="number">1</span> ? <span class="string">"1"</span>.equals(value) : Boolean.valueOf(value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(String columnName)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Double.valueOf(dataMap.get(columnName));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getFloat</span><span class="params">(String columnName)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Float.valueOf(dataMap.get(columnName));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">(String columnName)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Long.valueOf(dataMap.get(columnName));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">(String columnName)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> date = Long.valueOf(dataMap.get(columnName));</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(date);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> java.sql.<span class="function">Date <span class="title">getSqlDate</span><span class="params">(String columnName)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> date = Long.valueOf(dataMap.get(columnName));</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> java.sql.Date(date);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String columnName, String valueStr)</span> </span>&#123;</div><div class="line">        dataMap.put(columnName, valueStr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> key: columnName</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, String&gt; <span class="title">getDataMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dataMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> columnName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(String columnName)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> TextUtils.isEmpty(dataMap.get(columnName));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>提供SQLiteTypeMapping,只提供get操作</p>
</blockquote>
<figure class="highlight java"><figcaption><span>DbModelSQLiteTypeMapping.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.database.Cursor;</div><div class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.pushtorefresh.storio.sqlite.SQLiteTypeMapping;</div><div class="line"><span class="keyword">import</span> com.pushtorefresh.storio.sqlite.StorIOSQLite;</div><div class="line"><span class="keyword">import</span> com.pushtorefresh.storio.sqlite.operations.delete.DeleteResolver;</div><div class="line"><span class="keyword">import</span> com.pushtorefresh.storio.sqlite.operations.delete.DeleteResult;</div><div class="line"><span class="keyword">import</span> com.pushtorefresh.storio.sqlite.operations.get.DefaultGetResolver;</div><div class="line"><span class="keyword">import</span> com.pushtorefresh.storio.sqlite.operations.put.PutResolver;</div><div class="line"><span class="keyword">import</span> com.pushtorefresh.storio.sqlite.operations.put.PutResult;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by dannyhe on 14/01/2017.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbModelSQLiteTypeMapping</span> <span class="keyword">extends</span> <span class="title">SQLiteTypeMapping</span>&lt;<span class="title">DbModel</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DBModelPutResolver</span> <span class="keyword">extends</span> <span class="title">PutResolver</span>&lt;<span class="title">DbModel</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@NonNull</span></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> PutResult <span class="title">performPut</span><span class="params">(@NonNull StorIOSQLite storIOSQLite, @NonNull DbModel object)</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> PutResult.newUpdateResult(<span class="number">0</span>,<span class="string">""</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DBModelGetResolver</span> <span class="keyword">extends</span> <span class="title">DefaultGetResolver</span>&lt;<span class="title">DbModel</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@NonNull</span></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> DbModel <span class="title">mapFromCursor</span><span class="params">(@NonNull Cursor cursor)</span> </span>&#123;</div><div class="line">			DbModel result = <span class="keyword">new</span> DbModel();</div><div class="line">			<span class="keyword">int</span> columnCount = cursor.getColumnCount();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;</div><div class="line">				result.add(cursor.getColumnName(i), cursor.getString(i));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DBModelDeleteResolver</span> <span class="keyword">extends</span> <span class="title">DeleteResolver</span>&lt;<span class="title">DbModel</span>&gt; </span>&#123;</div><div class="line">		<span class="meta">@NonNull</span></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> DeleteResult <span class="title">performDelete</span><span class="params">(@NonNull StorIOSQLite storIOSQLite, @NonNull DbModel object)</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> DeleteResult.newInstance(<span class="number">0</span>,<span class="string">""</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DbModelSQLiteTypeMapping</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(<span class="keyword">new</span> DBModelPutResolver(),</div><div class="line">				<span class="keyword">new</span> DBModelGetResolver(),</div><div class="line">				<span class="keyword">new</span> DBModelDeleteResolver());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>如何使用</p>
</blockquote>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">StorIOSQLite mStorIOSQLite =  DefaultStorIOSQLite.builder()</div><div class="line"><span class="meta">    .sqliteOpenHelper</span>(dbOpenHelper)</div><div class="line"><span class="meta">    .defaultScheduler</span>(defaultStorIOSQLiteScheduler()) //io thread</div><div class="line"><span class="meta">    .addTypeMapping</span>(DbModel.class, new DbModelSQLiteTypeMapping())</div><div class="line"><span class="meta">    .build</span><span class="comment">;</span></div><div class="line"></div><div class="line">DbModel dbModel = mStorIOSQLite.get()</div><div class="line"><span class="meta">                .object</span>(DbModel.class)</div><div class="line"><span class="meta">                .withQuery</span>(RawQuery.builder()</div><div class="line"><span class="meta">                        .query</span>(<span class="string">"SELECT COUNT(*) AS c FROM sqlite_master WHERE type=? AND name=?"</span>)</div><div class="line"><span class="meta">                        .args</span>(<span class="string">"table"</span>, tableName)</div><div class="line"><span class="meta">                        .build</span>())</div><div class="line"><span class="meta">                .prepare</span>()</div><div class="line"><span class="meta">                .executeAsBlocking</span>()<span class="comment">;</span></div></pre></td></tr></table></figure>
<h3 id="Entity-VS-Cursor"><a href="#Entity-VS-Cursor" class="headerlink" title="Entity VS Cursor"></a>Entity VS Cursor</h3><p><code>storio</code>提供了两种读取方式:</p>
<ol>
<li><p>Entity </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DbModel dbModel = mStorIOSQLite.get()</div><div class="line">                .object(DbModel.class)</div><div class="line">                .withQuery(RawQuery.builder()</div><div class="line">                        .query("<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> c <span class="keyword">FROM</span> sqlite_master <span class="keyword">WHERE</span> <span class="keyword">type</span>=? <span class="keyword">AND</span> <span class="keyword">name</span>=?<span class="string">")</span></div><div class="line">                        .args("<span class="keyword">table</span><span class="string">", tableName)</span></div><div class="line">                        .build())</div><div class="line">                .prepare()</div><div class="line">                .executeAsBlocking();</div></pre></td></tr></table></figure>
</li>
<li><p>Cursor</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">final Cursor dbModelCursor = mStorIOSQLite.get()</div><div class="line">                .cursor()</div><div class="line">                .withQuery(RawQuery.builder()</div><div class="line">                        .query("<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> c <span class="keyword">FROM</span> sqlite_master <span class="keyword">WHERE</span> <span class="keyword">type</span>=? <span class="keyword">AND</span> <span class="keyword">name</span>=?<span class="string">")</span></div><div class="line">                        .args("<span class="keyword">table</span><span class="string">", tableName)</span></div><div class="line">                        .build())</div><div class="line">                .prepare()</div><div class="line">                .executeAsBlocking();</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="RxJava-VS-executeAsBlocking"><a href="#RxJava-VS-executeAsBlocking" class="headerlink" title="RxJava VS executeAsBlocking"></a>RxJava VS executeAsBlocking</h3><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p>关于<code>RxJava</code>的应用(<code>asRxObservable()</code>),目前数据库框架基本上都是利用<code>PublishSubject</code>.每个<code>StorIOSQLite</code>内部有个<code>RxChangesBus</code>,所有的<code>asRxObservable()</code>方法都是订阅这个bus.<br>订阅时会对Bus的事件过滤,只留下这次查询需要的变化(通过数据表的名称过滤)生成Observable.并通过<code>startWith</code>插入一次查询的结果,用来解决订阅时没有事件源触发查询操作的问题.</p>
<p>我们来分析下面的查询<code>StorIOSQLite</code>到底做了什么,下面的查询来自官网的文档:<br>我们先按着链式阅读来理解这个方法</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">mStorIOSQLite</span></div><div class="line">  <span class="selector-class">.get</span>()</div><div class="line">  <span class="selector-class">.listOfObjects</span>(Tweet.class)</div><div class="line">  <span class="selector-class">.withQuery</span>(Query.builder()</div><div class="line">    .table(<span class="string">"tweets"</span>)</div><div class="line">    .build())</div><div class="line">  <span class="selector-class">.prepare</span>()</div><div class="line">  <span class="selector-class">.asRxObservable</span>() <span class="comment">// Get Result as rx.Observable and subscribe to further updates of tables from Query!</span></div><div class="line">  <span class="selector-class">.observeOn</span>(mainThread()) <span class="comment">// All Rx operations work on Schedulers.io()</span></div><div class="line">  <span class="selector-class">.subscribe</span>(tweets -&gt; &#123; <span class="comment">// Please don't forget to unsubscribe</span></div><div class="line">      <span class="comment">// will be called with first result and then after each change of tables from Query</span></div><div class="line">      <span class="comment">// several changes in transaction -&gt; one notification</span></div><div class="line">      <span class="selector-tag">adapter</span><span class="selector-class">.setData</span>(tweets);</div><div class="line">    &#125;</div><div class="line">  );</div><div class="line"><span class="comment">// don't forget to manage Subscription and unsubscribe in lifecycle methods to prevent memory leaks</span></div></pre></td></tr></table></figure>
<blockquote>
<p>我们拿到数据库(storIOSQLite)读取(get)存有Tweet的列表(listOfObjects(Tweet.class))通过查询(Query)数据库表”tweets”.我们需要得到Observable(asRxObservable())然后在主线程订阅(observeOn(mainThread())),最后将数据给adapter.并且后面每次tweets表发生变化都会触发这次刷新(除非取消订阅,当然为了不引发内存泄露,我们需要在合理的时候取消订阅).</p>
</blockquote>
<h4 id="下面我们再来看StorIOSQLite做了什么"><a href="#下面我们再来看StorIOSQLite做了什么" class="headerlink" title="下面我们再来看StorIOSQLite做了什么?"></a>下面我们再来看<code>StorIOSQLite</code>做了什么?</h4><ol>
<li>首先通过<code>Query</code>来获取需要查询的表,我们这里是<code>tweets</code></li>
<li>通过内部的<code>RxChangesBus</code>订阅变化(<code>Changes</code>),并通过<code>filter</code>操作符过滤出存在<code>tweets</code>表的变化</li>
<li>查询一次<code>Query</code>并通过<code>startWith</code>操作符插入查询结果(会通过listOfObjects进行实体转换)</li>
</ol>
<p>注意:一定要及时取消订阅,以免引起内存泄露</p>
<h4 id="多张表的监听"><a href="#多张表的监听" class="headerlink" title="多张表的监听"></a>多张表的监听</h4><p>比如有这样的业务需求,我需要查询多张表以完成这次查询,但是一条SQL语句又不能实现.</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fetchDatasThenRefreshUI();<span class="comment">//读取数据并刷新UI,这里会读取table1和table2</span></div><div class="line">mStorIOSQLite</div><div class="line">    .observeChangesInTables(<span class="keyword">Sets</span>.newHashSet(<span class="string">"table1"</span>,<span class="string">"table2"</span>))</div><div class="line">    .subscribe(changes <span class="comment">-&gt; &#123;</span></div><div class="line">         fetchDatasThenRefreshUI(); <span class="comment">//如果有变化再次读取数据库</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>上面的写法是不是很繁琐,我们重构一下…</p>
</blockquote>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mStorIOSQLite</div><div class="line">    .observeChangesInTables(Sets.<span class="keyword">new</span><span class="type">HashSet</span>(<span class="string">"table1"</span>,<span class="string">"table2"</span>))</div><div class="line">    .startWith(Changes.<span class="keyword">new</span><span class="type">Instance</span>(<span class="string">""</span>))</div><div class="line">    .compose(<span class="built_in">this</span>.&lt;Changes&gt;bindUntilEvent(FragmentEvent.DESTROY)) <span class="comment">//使用RxLifecycle自动取消订阅</span></div><div class="line">    .subscribe(changes -&gt; &#123;</div><div class="line">         fetchDatasThenRefreshUI(); <span class="comment">//读取数据并刷新UI,这里会读取table1和table2</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h4 id="主动通知变化"><a href="#主动通知变化" class="headerlink" title="主动通知变化"></a>主动通知变化</h4><p><code>StorIOSQLite</code>默认的通知变化是只要对一张表有数据操作时(CURD)均会发生通知,如果我们有个业务需求是需要给一个表里面插入1000条数据,插入成功后再刷新界面。<br>这个时候我们就需要<code>LowLevel</code></p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">List&lt;<span class="keyword">String</span>&gt; strings = ...; <span class="comment">//存放了操作两个数据库表的sql语句</span></div><div class="line"><span class="keyword">try</span> &#123;    </div><div class="line">    mStorIOSQLite.lowLevel().beginTransaction(); <span class="comment">//事务</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">String</span> sql : <span class="type">strings</span>) &#123; </div><div class="line">        mStorIOSQLite.lowLevel()</div><div class="line">            .executeSQL(RawQuery.builder().query(sql).build()); </div><div class="line">    &#125;</div><div class="line">    mStorIOSQLite.lowLevel()</div><div class="line">        .setTransactionSuccessful();</div><div class="line">    <span class="comment">//通知table1和table2发生了变化(触发再次读取事件)</span></div><div class="line">    mStorIOSQLite.lowLevel()</div><div class="line">        .notifyAboutChanges(Changes.<span class="keyword">new</span><span class="type">Instance</span>(Sets.<span class="keyword">new</span><span class="type">HashSet</span>(<span class="string">"table1"</span>,<span class="string">"table2"</span>))); </div><div class="line">    &#125; finally &#123;</div><div class="line">        mStorIOSQLite.lowLevel().endTransaction();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017开篇:curl使用备忘]]></title>
      <url>http://dannyhe.wang/2017/02/13/login-with-curl/</url>
      <content type="html"><![CDATA[<p>真的好久没写东西了,主要原因是去年下半年太忙了,忙着找工作忙着边学边做<code>Android</code>…<br>这里备注一下curl的使用,因为项目原因发布新版本的时候需要将编译后的<code>APK</code>文件上传到统一的版本管理后台.</p>
<h3 id="解析远端Json文件并下载资源"><a href="#解析远端Json文件并下载资源" class="headerlink" title="解析远端Json文件并下载资源"></a>解析远端Json文件并下载资源</h3><p>比如我这里需要解析<a href="http://gank.io/" target="_blank" rel="external">干货集中营</a>的接口并下载图片</p>
<p>API:<a href="http://gank.io/api/data/%E7%A6%8F%E5%88%A9/10/1" target="_blank" rel="external">http://gank.io/api/data/福利/10/1</a></p>
<p>解析Json我们使用<a href="https://stedolan.github.io/jq/" target="_blank" rel="external">jq</a>,可以用<code>Homebrew</code>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install jq</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -s http://gank.io/api/data/%E7%A6%8F%E5%88%A9/10/1 | jq &apos;.results[] | .url &apos; | xargs -n 1 curl -O -#</div></pre></td></tr></table></figure>
<h3 id="上传文件时显示进度"><a href="#上传文件时显示进度" class="headerlink" title="上传文件时显示进度"></a>上传文件时显示进度</h3><p>上传文件时如果需要显示进度必须显示指明<code>-o参数</code>比如<code>-o /dev/null</code></p>
<h3 id="获取网络状态码"><a href="#获取网络状态码" class="headerlink" title="获取网络状态码"></a>获取网络状态码</h3><p>使用<code>-w</code>参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -s -o /dev/null -w %&#123;http_code&#125; www.baidu.com</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> curl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不同平台下的项目自动打包方式]]></title>
      <url>http://dannyhe.wang/2016/08/16/autopackage/</url>
      <content type="html"><![CDATA[<h1 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h1><p>iOS下的打包主要由<code>xcodebuild</code>来完成.在xcode 7以前我通过<code>xcodebuild</code>构建项目然后通过<code>xcrun</code>来生成ipa文件.<br>类似以下命令</p>
<figure class="highlight nsis"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xcodebuild -configuration <span class="variable">$&#123;BuildConfig&#125;</span> -target <span class="string">"<span class="variable">$&#123;TargetName&#125;</span>"</span> GCC_PREPROCESSOR_DEFINITIONS=<span class="string">"\<span class="variable">$&#123;GCC_PREPROCESSOR_DEFINITIONS&#125;</span> FREEVERSION=0"</span> WARNING_LDFLAGS=<span class="string">"\<span class="variable">$&#123;WARNING_LDFLAGS&#125;</span> -w"</span> CODE_SIGN_IDENTITY=<span class="string">"<span class="variable">$&#123;DistributionCodeIdentity&#125;</span>"</span> PROVISIONING_PROFILE=<span class="string">"<span class="variable">$&#123;DistributionProvision&#125;</span>"</span></div><div class="line">xcrun -sdk iphoneos PackageApplication -v <span class="string">"<span class="variable">$&#123;ProductDir&#125;</span>/<span class="variable">$&#123;TargetName&#125;</span>.app"</span> -o <span class="string">"<span class="variable">$&#123;PrjDir&#125;</span>/<span class="variable">$&#123;IpaName&#125;</span>"</span></div></pre></td></tr></table></figure>
<p>这种方式打包有很多局限:</p>
<ol>
<li>需要自己备份生成的符号文件等.</li>
<li>在xcode 7以后这种打包方式不能通过苹果的审核.</li>
<li>如果需要其他证书的ipa的文件,又需要重新构建.<a id="more"></a>
</li>
</ol>
<p><strong>所以最好的方式是完全模拟xcode的发布包流程:先archive备份,然后通过压缩包导出不同证书的ipa</strong></p>
<p>如何实现呢? 只需要使用一个命令工具:<code>xcodebuild</code>.<br>这里就只说明xcode 7以后的命令使用方式.<br>首先我们<code>archive</code>项目:</p>
<figure class="highlight nsis"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcodebuild -sdk iphoneos -configuration Release -scheme <span class="variable">$&#123;SchemeName&#125;</span> -target <span class="string">"<span class="variable">$&#123;TargetName&#125;</span>"</span> -archivePath <span class="variable">$&#123;ArchiveFileFullPath&#125;</span> GCC_PREPROCESSOR_DEFINITIONS=<span class="string">"\<span class="variable">$&#123;GCC_PREPROCESSOR_DEFINITIONS&#125;</span> FREEVERSION=0"</span> WARNING_LDFLAGS=<span class="string">"\<span class="variable">$&#123;WARNING_LDFLAGS&#125;</span> -w"</span> CODE_SIGN_IDENTITY=<span class="string">"<span class="variable">$&#123;DistributionCodeIdentity&#125;</span>"</span> PROVISIONING_PROFILE=<span class="string">"<span class="variable">$&#123;DistributionProvision&#125;</span>"</span> archive</div></pre></td></tr></table></figure>
<ul>
<li><code>SchemeName</code>为xcode中项目的<code>Scheme</code></li>
<li><code>TargetName</code>为项目的某个target名称</li>
<li><code>ArchiveFileFullPath</code>指定<code>xcarchive</code>文件的路径,如<code>HelloWorld.xcarchive</code></li>
<li><code>DistributionCodeIdentity</code>为证书的标示,值形如<code>iPhone Distribution: xxxx (xxx)</code></li>
<li><code>DistributionProvision</code>为profile的identifier,值形如<code>xxxx-xxxx-xxx-xxx-xx</code>(其实就是导入xcode后此profile的文件名)</li>
<li><code>GCC_PREPROCESSOR_DEFINITIONS</code>和<code>WARNING_LDFLAGS</code>都是xcode的环境变量</li>
</ul>
<p>生成成功<code>xcarchive</code>文件后我们就可以导出ipa文件了</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xcodebuild</span> -exportArchive -exportOptionsPlist <span class="variable">$&#123;ExportOptionsPlistPath&#125;</span> -archivePath <span class="variable">$&#123;ArchiveFileFullPath&#125;</span> -exportPath <span class="variable">$&#123;IpaFileDirectory&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>ExportOptionsPlistPath</code> 指向一个plist文件的路径,这个plist为这次导出提供参数，这里提供的信息其实就是你在xcode中导出ipa的时候选择的那些选项.</li>
<li><code>ArchiveFileFullPath</code> 是前面我们生成的<code>xcarchive</code> 文件路径</li>
<li><code>IpaFileDirectory</code> 是最终导出的ipa的目录(<em>注意这里是目录而不是具体的ipa文件路径</em>)</li>
</ul>
<p><code>ExportOptionsPlistPath</code>plist文件的格式类似如下:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>method<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>app-store<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>teamID<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>开发证书的团队ID<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然还有其他参数的控制比如bitcode 符号文件是否打包一起等等.具体里面可以有的参数及取值可以通过<code>xcodebuild -h</code>命令查看.<br><code>method</code>我一般就用到<code>app-store</code>、<code>ad-hoc</code>、<code>development</code>这三个值,通过设置<code>teamID</code>后<code>xcodebuild</code>会自动查找对应的证书(前提是你必选在keychain中安装好这些证书)<br>我们可以在脚本中通过<code>PlistBuddy</code>动态修改这个plist文件的值来实现不同的打包的需求(当然也可以使用几个不同的plist)</p>
<p>最后我们就得到了xcarchive文件,然后根据不同的需求导出不同证书的ipa文件</p>
<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>android上的打包就更复杂些.首先,如果有jni则需要先编译so文件并备份符号文件.然后是java的混淆日志文件等等.<br>不过android上则按着平时打包的步骤写成脚本就好<code>ant</code>或者<code>gradle</code>任务.<br>我推荐使用<code>gradle</code>插件进行开发,一是和<code>Android Studio</code>结合很强大,二是<code>gradle</code>可以直接调用<code>ant</code>任务:)</p>
<h1 id="Windows-Phone"><a href="#Windows-Phone" class="headerlink" title="Windows Phone"></a>Windows Phone</h1><p>在<code>VS</code>里构建用的命令是<code>msbuild</code>(Microsoft Build Engine),它和<code>ant</code>的形式有些类似.是基于<code>xml</code>的配置，<br>其实<code>VS</code>中我们的设置最终落实到的依然是<code>Microsoft Build Engine</code>.这个xml文件就是<code>*.*proj</code>文件.<br>只是这里需要注意<code>Windows</code>下标准命令行的上下文是没有<code>msbuild</code>命令的.<br>我们需要运行类似名为<code>Visual Studio 2012 xxxx命令提示</code>的工具,但是我们可以手动将这个环境变量加入我们的<code>DOS</code>里.<br>比如下面的脚本先设置上下文,然后执行<code>msbuild</code>命令</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">echo.<span class="comment">/*</span></div><div class="line">echo. * Check VC++ environment...</div><div class="line">echo. */</div><div class="line">echo.</div><div class="line"></div><div class="line"><span class="keyword">set</span> FOUND_VC=0</div><div class="line"><span class="keyword">set</span> FOUND_OUTDIR=0</div><div class="line"></div><div class="line"><span class="keyword">if</span> not <span class="string">"%~1"</span>==<span class="string">""</span> <span class="keyword">set</span> FOUND_OUTDIR=1</div><div class="line"></div><div class="line"><span class="keyword">if</span> defined VS120COMNTOOLS (</div><div class="line">    <span class="keyword">set</span> VSTOOLS=<span class="string">"%VS120COMNTOOLS%"</span></div><div class="line">    <span class="keyword">set</span> VC_VER=120</div><div class="line">    <span class="keyword">set</span> FOUND_VC=1</div><div class="line">) </div><div class="line"></div><div class="line"><span class="keyword">set</span> VSTOOLS=%VSTOOLS:"=%</div><div class="line"><span class="keyword">set</span> <span class="string">"VSTOOLS=%VSTOOLS:\=/%"</span></div><div class="line"><span class="keyword">set</span> VSVARS=<span class="string">"%VSTOOLS%vsvars32.bat"</span></div><div class="line"><span class="keyword">if</span> not defined VSVARS (</div><div class="line">    echo Can't find VC2013 installed!</div><div class="line">    goto <span class="keyword">ERROR</span></div><div class="line">)</div><div class="line">echo.<span class="comment">/*</span></div><div class="line">echo. * Building Windows Phone Project...</div><div class="line">echo. */</div><div class="line">echo.</div><div class="line">call %VSVARS%</div><div class="line"><span class="keyword">if</span> %FOUND_VC%==1 (</div><div class="line">	msbuild  HelloWorld.WindowsPhone.vcxproj /p:Configuration=<span class="string">"Release"</span>  /p:Platform=<span class="string">"ARM"</span> /t:Clean;Rebuild</div><div class="line">)</div></pre></td></tr></table></figure>
<p><code>msbuild  HelloWorld.WindowsPhone.vcxproj /p:Configuration=&quot;Release&quot;  /p:Platform=&quot;ARM&quot; /t:Clean;Rebuild</code>表示在<code>Release</code>模式下清理然后重新构建<code>HelloWorld.WindowsPhone.vcxproj</code>项目,目标平台为<code>ARM</code>.<br>命令会按以前构建的目标目录导出最终的包文件,如果之前没设置,则在当前目录.如果需要指定通过参数<code>/p:OutDir=路径</code>设置</p>
<h2 id="验证安装包"><a href="#验证安装包" class="headerlink" title="验证安装包"></a>验证安装包</h2><p>微软提供了一个命令行工具<code>appcert.exe</code>来验证,这个文件的一般路径为:<code>C:\Program Files (x86)\Windows Kits\10\App Certification Kit\appcert.exe</code></p>
<blockquote>
<p>appcert.exe test -appxpackagepath 包路径 -reportoutputpath 生成xml格式的报告文件路径</p>
</blockquote>
<p><strong>注意:这里说明的是基于<code>VS2013</code>的开发环境.<code>VS2015</code>可能有些出入.</strong></p>
<h2 id="部署安装包到设备"><a href="#部署安装包到设备" class="headerlink" title="部署安装包到设备"></a>部署安装包到设备</h2><p><code>AppDeployCmd.exe</code><br>一般路径为:<code>C:\Program Files (x86)\Microsoft SDKs\Windows Phone\v8.1\Tools\AppDeploy\AppDeployCmd.exe</code></p>
<blockquote>
<p>AppDeployCmd.exe /install 包路径 /targetdevice:de</p>
</blockquote>
<p>End:)</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Android </tag>
            
            <tag> Windows Phone </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[说说Core Graphics]]></title>
      <url>http://dannyhe.wang/2016/08/03/thinking-core-graphics/</url>
      <content type="html"><![CDATA[<p>记得11年左右做iOS开发的人真不多,大环境下大家学习iOS开发基本都靠WWDC和国外的文献,近几年随着iOS开发的火爆,好多技术都被挖掘出来(其实是自己以前英文不好,好多东西都是点到为止),最近比较闲重新看了下iOS相关的一些东西.感觉有些东西虽然不是常用的,但明白后可以更灵活的运用到日常的开发中.这里记录下我对iOS里一些特性理解.</p>
<h2 id="为什么说Core-Graphics是广义的离屏渲染"><a href="#为什么说Core-Graphics是广义的离屏渲染" class="headerlink" title="为什么说Core Graphics是广义的离屏渲染?"></a>为什么说Core Graphics是广义的离屏渲染?</h2><p>首先看GPU屏幕渲染两种方式:</p>
<ul>
<li>On-Screen Rendering:意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。</li>
<li>Off-Screen Rendering:意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。</li>
</ul>
<p>上面的两种方式都是在GPU中执行的,离屏渲染会开辟一个缓冲区上下文进行渲染(这里不会在屏幕上显示),然后进行上下的切换.比如将之前开辟的缓冲区设置为当前屏幕的缓冲区(显示到屏幕),但这里开销比较大。<br>而<code>Core Graphics</code>是<code>Software rendering</code>,也就是<code>CPU</code>执行<code>GPU</code>上一样的算法(<code>GPU</code>能更好的执行并发任务).<br>参考:<a href="https://en.wikipedia.org/wiki/Software_rendering" target="_blank" rel="external">https://en.wikipedia.org/wiki/Software_rendering</a></p>
<h2 id="为什么说离屏渲染并不意味着软件绘制"><a href="#为什么说离屏渲染并不意味着软件绘制" class="headerlink" title="为什么说离屏渲染并不意味着软件绘制?"></a>为什么说离屏渲染并不意味着软件绘制?</h2><p><code>QuartzCore Framework</code>通过<code>Core Anmation</code>来把我们构建的界面绘制到屏幕上(通过操作openGL ES).<br>这里面会使用<code>openGL ES</code>的缓冲区,它是在<code>GPU</code>里执行的。比如<code>CALayer</code>的<code>masking</code>就使用了片段着色器.<br><img src="http://cc.cocimg.com/api/uploads/20150428/1430209790572112.png" alt="CoreAnmation"></p>
<blockquote>
<p>这里说明下CALayer的mask,它是根据设置的layer的alpha值进行过滤像素实现模板的(片段着色器),不是openGL ES中的模板测试实现的</p>
</blockquote>
<p>参考WWDC:<a href="https://developer.apple.com/videos/play/wwdc2014/419/" target="_blank" rel="external">https://developer.apple.com/videos/play/wwdc2014/419/</a></p>
<h2 id="Quartz-2D-和Quartz-Core的区别是什么"><a href="#Quartz-2D-和Quartz-Core的区别是什么" class="headerlink" title="Quartz 2D 和Quartz Core的区别是什么?"></a>Quartz 2D 和Quartz Core的区别是什么?</h2><p><code>QuartzCore Framework</code>通过<code>Core Anmation</code>来把我们构建的界面绘制到屏幕上.<br><code>Quartz 2D</code>是<code>CoreGraphics Framework</code>下一套API</p>
<h2 id="Core-Graphics有颜色的混合设置吗"><a href="#Core-Graphics有颜色的混合设置吗" class="headerlink" title="Core Graphics有颜色的混合设置吗?"></a>Core Graphics有颜色的混合设置吗?</h2><p><code>CGBlendMode</code>定义了很多预设模式,可以通过<code>drawInRect:blendMode:alpha:</code>或者<code>UIRectFillUsingBlendMode(...)</code>等函数进行混合模式的设置。</p>
<h2 id="openGL-ES的数据可以用Core-Graphics绘制吗"><a href="#openGL-ES的数据可以用Core-Graphics绘制吗" class="headerlink" title="openGL ES的数据可以用Core Graphics绘制吗?"></a>openGL ES的数据可以用Core Graphics绘制吗?</h2><p>具体的转换方法参考这里:<a href="http://gamesfromwithin.com/remixing-opengl-and-uikit" target="_blank" rel="external">http://gamesfromwithin.com/remixing-opengl-and-uikit</a></p>
<h2 id="如何理解贝塞尔曲线"><a href="#如何理解贝塞尔曲线" class="headerlink" title="如何理解贝塞尔曲线"></a>如何理解贝塞尔曲线</h2><p>通过维基百科的图理解:)</p>
<ul>
<li>二次贝塞尔曲线只有一个控制点p1<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/2/2d/Bezier_2_big.gif/240px-Bezier_2_big.gif" alt="二次贝塞尔曲线"></li>
<li>三次贝塞尔曲线有两个控制点p1和p2<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Bezier_3_big.gif/240px-Bezier_3_big.gif" alt="三次贝塞尔曲线"></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/gnustep/quartzcore" target="_blank" rel="external">https://github.com/gnustep/quartzcore</a></li>
<li><a href="http://www.jianshu.com/p/6d24a4c29e18" target="_blank" rel="external">http://www.jianshu.com/p/6d24a4c29e18</a></li>
<li><a href="http://www.jianshu.com/p/0e785269dccc" target="_blank" rel="external">http://www.jianshu.com/p/0e785269dccc</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[以ABS宏为例说说Clang中的宏定义方式技巧]]></title>
      <url>http://dannyhe.wang/2016/07/25/thinking-about-macro/</url>
      <content type="html"><![CDATA[<p>我们在iOS开发的时候经常使用宏定义,最常用的宏肯定是<code>DEBUG</code>,大概像下面这样:)</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></div><div class="line">...</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_feature(objc_arc_weak)</span></div><div class="line">...</div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> __has_feature(objc_arc)</span></div><div class="line">...</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">...</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (TARGET_OS_MAC || TARGET_OS_IPHONE)</span></div><div class="line">...</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>记录下我对Clang中定义的宏<code>ABS</code>的理解(从零开始的理解),它的作用很简单:<code>得到一个数的绝对值</code>。</p>
<a id="more"></a>
<h1 id="宏的类型"><a href="#宏的类型" class="headerlink" title="宏的类型"></a>宏的类型</h1><p>宏分为对象宏(object-like macro)和函数宏(function-like macro)。</p>
<h2 id="对象宏"><a href="#对象宏" class="headerlink" title="对象宏"></a>对象宏</h2><p>对象宏就是我们定义的一些固定值,就像苹果的定义:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*  Even though these might be more useful as long doubles, POSIX requires</span></div><div class="line">    that they be double-precision literals.                                   */</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_E         2.71828182845904523536028747135266250   <span class="comment">/* e              */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_LOG2E     1.44269504088896340735992468100189214   <span class="comment">/* log2(e)        */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_LOG10E    0.434294481903251827651128918916605082  <span class="comment">/* log10(e)       */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_LN2       0.693147180559945309417232121458176568  <span class="comment">/* loge(2)        */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_LN10      2.30258509299404568401799145468436421   <span class="comment">/* loge(10)       */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_PI        3.14159265358979323846264338327950288   <span class="comment">/* pi             */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_PI_2      1.57079632679489661923132169163975144   <span class="comment">/* pi/2           */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_PI_4      0.785398163397448309615660845819875721  <span class="comment">/* pi/4           */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_1_PI      0.318309886183790671537767526745028724  <span class="comment">/* 1/pi           */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_2_PI      0.636619772367581343075535053490057448  <span class="comment">/* 2/pi           */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_2_SQRTPI  1.12837916709551257389615890312154517   <span class="comment">/* 2/sqrt(pi)     */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_SQRT2     1.41421356237309504880168872420969808   <span class="comment">/* sqrt(2)        */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_SQRT1_2   0.707106781186547524400844362104849039  <span class="comment">/* 1/sqrt(2)      */</span></span></div></pre></td></tr></table></figure>
<p>理解成简单的替换代码就好。</p>
<h2 id="函数宏"><a href="#函数宏" class="headerlink" title="函数宏"></a>函数宏</h2><p>函数宏就像函数一样接受参数,就像上文中说到的<code>ABS</code>宏</p>
<h1 id="定义ABS宏"><a href="#定义ABS宏" class="headerlink" title="定义ABS宏"></a>定义ABS宏</h1><p>我们尝试自己定义一个宏<code>ABS</code>,功能和<code>Clang</code>的一样,得到一个数的绝对值。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>version <span class="number">1</span></div><div class="line"><span class="comment">#define ABS(A) A &lt; 0 ? - A : A</span></div></pre></td></tr></table></figure>
<p>然后使用</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSLog(@<span class="string">"%d"</span>,ABS(<span class="name">-1</span>))<span class="comment">; //1</span></div></pre></td></tr></table></figure>
<p>好简单,完成了。别人拿去一用马上出问题了,只能说还是太年轻了:)</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSLog(@<span class="string">"%d"</span>,ABS(<span class="name">-1</span>) + <span class="number">1</span>)<span class="comment">; //1 error</span></div><div class="line">//NSLog(@<span class="string">"%d"</span>,<span class="number">-1</span> &lt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">1</span> + <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>把上面的宏展开就明显看出结果是<code>1</code>,我们应该把表达式的结果作为结果替换宏,<br>so我们修复我们的宏:</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>version <span class="number">2</span></div><div class="line"><span class="comment">#define ABS(A) (A &lt; 0 ? - A : A)</span></div></pre></td></tr></table></figure>
<p>以为天下太平了? <code>No</code>,如果像下面这样用呢?</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSLog(@"%d",ABS(2 &lt; 3 ? <span class="string">-1</span> &lt; 0 ? <span class="string">-1</span> : <span class="string">-2</span> : <span class="string">-2</span>)); //<span class="string">-1</span> error</div><div class="line">//NSLog(@"%d",2 &lt; 3 ? <span class="string">-1</span> : <span class="string">-2</span> &lt; 0 ? - 2 &lt; 3 ? <span class="string">-1</span> : <span class="string">-2</span> : 2 &lt; 3 ? <span class="string">-1</span> : <span class="string">-2</span>);</div><div class="line">//NSLog(@"%d",(2 &lt; 3 ? <span class="string">-1</span> : <span class="string">-2</span> ) &lt; 0 ? (- 2 &lt; 3 ? <span class="string">-1</span> : <span class="string">-2</span>) : (2 &lt; 3 ? <span class="string">-1</span> : <span class="string">-2</span>));</div></pre></td></tr></table></figure>
<p>哈哈，是不是被运算符优先级吓到了? 其实我们需要保证我们参数可以是表达式。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//version <span class="number">3</span></div><div class="line">#define ABS(<span class="name">A</span>) ((<span class="name">A</span>) &lt; <span class="number">0</span> ? - (<span class="name">A</span>) : (<span class="name">A</span>))</div></pre></td></tr></table></figure>
<p>现在这个宏基本胜任了大部分地方,但是过几天某大牛突然过来找你,说你提供的宏有问题!</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">-1</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,ABS(a++)); <span class="comment">//0 error</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,a);<span class="comment">//1 error</span></div></pre></td></tr></table></figure>
<p>你看到这代码的第一反应可能是,卧槽,为什么一定要用<code>a++</code>就不能用完了再<code>+1</code>嘛！可是大牛说他就爱这样写,代码简洁…<br>好！我们还是老实的展开这个宏</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSLog(@<span class="string">"%d"</span>,((<span class="name">a++</span>) &lt; <span class="number">0</span> ? - (<span class="name">a++</span>) : (<span class="name">a++</span>)))<span class="comment">;</span></div><div class="line">NSLog(@<span class="string">"%d"</span>,a)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><code>a++</code>表示先使用<code>a</code>的值,然后对<code>a</code>进行自加1,上面的展开的宏中,第一次<code>a</code>和<code>0</code>比较过后进行了自加<code>1</code>变成了<code>0</code>,后面返回<code>0</code>后又自加<code>1</code>，所以<code>a</code>最后的值变成了<code>1</code>!<br>为了解决这个问题我们先算出表达式<code>A</code>的值,保证它只被计算一次。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//version <span class="number">4</span></div><div class="line">#define ABS(<span class="name">A</span>) (&#123;__typeof__ (<span class="name">A</span>) __a = (<span class="name">A</span>)<span class="comment">; __a &lt; 0 ? - __a : __a;&#125;)</span></div></pre></td></tr></table></figure>
<p><code>({...})</code>是语句表达式,GNU C 把包含在括号中的复合语句看做是一个表达式，称为语句表达式，它可以出现在任何允许表达式的地方，你可以在语句表达式中使用循环、局部变量等，原本只能在复合语句中使用。</p>
<h1 id="苹果定义的ABS"><a href="#苹果定义的ABS" class="headerlink" title="苹果定义的ABS"></a>苹果定义的ABS</h1><p>最后我们来看看苹果定义的<code>ABS</code>宏:</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#define __NSX_PASTE__(<span class="type">A</span>,<span class="type">B</span>) <span class="type">A</span>##<span class="type">B</span></div><div class="line">#<span class="keyword">if</span> !defined(<span class="type">ABS</span>)</div><div class="line">#define __NSABS_IMPL__(<span class="type">A</span>,<span class="type">L</span>) (&#123; __typeof__(<span class="type">A</span>) __NSX_PASTE__(__a,<span class="type">L</span>) = (<span class="type">A</span>); (__NSX_PASTE__(__a,<span class="type">L</span>) &lt; 0) ? - __NSX_PASTE__(__a,<span class="type">L</span>) : __NSX_PASTE__(__a,<span class="type">L</span>); &#125;)</div><div class="line">#define <span class="type">ABS</span>(<span class="type">A</span>) __NSABS_IMPL__(<span class="type">A</span>,__COUNTER__)</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>看起来和我们自己定义的<code>ABS</code>整体架构差不多,<code>__NSX_PASTE__</code>中的<code>##</code>是特殊符号用来连接两个参数。比如上面是<code>__a</code>和<code>L</code>，而<code>L</code>传入的是<code>__COUNTER__</code>，它是使用一次后便会自加1的特殊宏.也就是为了给我们的变量加了后缀。这是为了确保在这个作用域中宏不会出现相同变量。<br>像我们自己定义的宏一样简单的使用<code>__a</code>变量,如果代码的作用域中有重复的<code>__a</code>变量就悲剧了… 比如我们像下面这样使用我们先前自己定义的<code>ABS</code>宏(version 4)就会发现错误了…</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int <span class="variable">__a</span> = -<span class="number">1</span>;</div><div class="line">NSLog(@<span class="string">"%d"</span>,<span class="built_in">ABS</span>(<span class="variable">__a</span>++)); <span class="comment">//32767 error</span></div><div class="line">NSLog(@<span class="string">"%d"</span>,<span class="variable">__a</span>); <span class="comment">// -1</span></div></pre></td></tr></table></figure>
<p>你看了上面苹果的定义后应该知道怎么修改我们的定义了吧<br>:) end</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用Lua实现A*寻路算法]]></title>
      <url>http://dannyhe.wang/2016/07/22/findWay/</url>
      <content type="html"><![CDATA[<p>关于A*寻路的算法参考这篇<a href="http://www.cnblogs.com/zhoug2020/p/3468167.html" target="_blank" rel="external">文章</a><br><a id="more"></a></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-------------------------------------------------------------------------------</span></div><div class="line"><span class="comment">-- 预定义工具类</span></div><div class="line"><span class="comment">-------------------------------------------------------------------------------</span></div><div class="line"><span class="comment">-- 定义类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">class</span><span class="params">(classname, super)</span></span></div><div class="line">    <span class="keyword">local</span> superType = <span class="built_in">type</span>(super)</div><div class="line">    <span class="keyword">local</span> cls</div><div class="line"></div><div class="line">    <span class="keyword">if</span> superType ~= <span class="string">"function"</span> <span class="keyword">and</span> superType ~= <span class="string">"table"</span> <span class="keyword">then</span></div><div class="line">        superType = <span class="literal">nil</span></div><div class="line">        super = <span class="literal">nil</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> superType == <span class="string">"function"</span> <span class="keyword">or</span> (super <span class="keyword">and</span> super.__ctype == <span class="number">1</span>) <span class="keyword">then</span></div><div class="line">        <span class="comment">-- inherited from native C++ Object</span></div><div class="line">        cls = &#123;&#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> superType == <span class="string">"table"</span> <span class="keyword">then</span></div><div class="line">            <span class="comment">-- copy fields from super</span></div><div class="line">            <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(super) <span class="keyword">do</span> cls[k] = v <span class="keyword">end</span></div><div class="line">            cls.__create = super.__create</div><div class="line">            cls.super    = super</div><div class="line">        <span class="keyword">else</span></div><div class="line">            cls.__create = super</div><div class="line">            cls.ctor = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line"></div><div class="line">        cls.__cname = classname</div><div class="line">        cls.__ctype = <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">cls.new</span><span class="params">(...)</span></span></div><div class="line">            <span class="keyword">local</span> instance = cls.__create(...)</div><div class="line">            <span class="comment">-- copy fields from class to native object</span></div><div class="line">            <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(cls) <span class="keyword">do</span> instance[k] = v <span class="keyword">end</span></div><div class="line">            instance.class = cls</div><div class="line">            instance:ctor(...)</div><div class="line">            <span class="keyword">return</span> instance</div><div class="line">        <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment">-- inherited from Lua Object</span></div><div class="line">        <span class="keyword">if</span> super <span class="keyword">then</span></div><div class="line">            cls = &#123;&#125;</div><div class="line">            <span class="built_in">setmetatable</span>(cls, &#123;<span class="built_in">__index</span> = super&#125;)</div><div class="line">            cls.super = super</div><div class="line">        <span class="keyword">else</span></div><div class="line">            cls = &#123;ctor = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span>&#125;</div><div class="line">        <span class="keyword">end</span></div><div class="line"></div><div class="line">        cls.__cname = classname</div><div class="line">        cls.__ctype = <span class="number">2</span> <span class="comment">-- lua</span></div><div class="line">        cls.<span class="built_in">__index</span> = cls</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">cls.new</span><span class="params">(...)</span></span></div><div class="line">            <span class="keyword">local</span> instance = <span class="built_in">setmetatable</span>(&#123;&#125;, cls)</div><div class="line">            instance.class = cls</div><div class="line">            instance:ctor(...)</div><div class="line">            <span class="keyword">return</span> instance</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> cls</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">-- 判断是否是类的实例</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">iskindof</span><span class="params">(obj, classname)</span></span></div><div class="line">    <span class="keyword">local</span> t = <span class="built_in">type</span>(obj)</div><div class="line">    <span class="keyword">local</span> mt</div><div class="line">    <span class="keyword">if</span> t == <span class="string">"table"</span> <span class="keyword">then</span></div><div class="line">        mt = <span class="built_in">getmetatable</span>(obj)</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> mt <span class="keyword">do</span></div><div class="line">        <span class="keyword">if</span> mt.__cname == classname <span class="keyword">then</span></div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">        mt = mt.super</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">-------------------------------------------------------------------------------</span></div><div class="line"><span class="comment">-- 逻辑</span></div><div class="line"><span class="comment">-------------------------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> ASSERT_FUNC = <span class="function"><span class="keyword">function</span><span class="params">(op)</span></span></div><div class="line">    <span class="built_in">assert</span>(op,string.format(<span class="string">"error:%s"</span>,<span class="built_in">debug</span>.<span class="built_in">getinfo</span>(<span class="number">1</span>).name))</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">-- Point</span></div><div class="line"><span class="keyword">local</span> PathPoint = class(<span class="string">"PathPoint"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:ctor</span><span class="params">(x,y)</span></span></div><div class="line">    self:setX(x)</div><div class="line">    self:setY(y)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:setX</span><span class="params">(x)</span></span></div><div class="line">    self.x = x</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:getX</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">return</span> self.x</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:setY</span><span class="params">(y)</span></span></div><div class="line">    self.y = y</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:getY</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">return</span> self.y</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:getXY</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">return</span> self:getX(),self:getY()</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:setG</span><span class="params">(g)</span></span></div><div class="line">    self.g = g</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:getG</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">return</span> self.g <span class="keyword">or</span> <span class="number">0</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:setH</span><span class="params">(h)</span></span></div><div class="line">    self.h = h</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:getH</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">return</span> self.h</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:getF</span><span class="params">()</span></span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> (self:getG() <span class="keyword">and</span> self:getH()) <span class="keyword">and</span> (self:getG() + self:getH()) <span class="keyword">or</span> <span class="number">0</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:setParent</span><span class="params">(point)</span></span></div><div class="line">    ASSERT_FUNC(iskindof(point, <span class="string">"PathPoint"</span>))</div><div class="line">    self.parent = point</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:getParent</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">return</span> self.parent</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:generalPointString</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">local</span> infoString = string.format(<span class="string">"PathPoint:[%s]@F|G|H:[%s %s %s]"</span>,</div><div class="line">        self:ID(),</div><div class="line">        <span class="built_in">tostring</span>((self:getF() <span class="keyword">and</span> self:getF() <span class="keyword">or</span>  <span class="string">"unkown"</span>)),</div><div class="line">        <span class="built_in">tostring</span>((self:getG() <span class="keyword">and</span> self:getG() <span class="keyword">or</span>  <span class="string">"unkown"</span>)),</div><div class="line">        <span class="built_in">tostring</span>((self:getH() <span class="keyword">and</span> self:getH() <span class="keyword">or</span>  <span class="string">"unkown"</span>)))</div><div class="line">    <span class="keyword">if</span> self:getParent() <span class="keyword">then</span></div><div class="line">        infoString = string.format(<span class="string">"%s\nPathPoint:[%s]@Parent:%s"</span>,</div><div class="line">            infoString,</div><div class="line">            self:ID(),</div><div class="line">            self:getParent():generalPointString())</div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> infoString</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathPoint:ID</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">return</span> string.format(<span class="string">"%d_%d"</span>,self:getX(),self:getY())</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">PathPoint.<span class="built_in">__tostring</span> = <span class="function"><span class="keyword">function</span><span class="params">(point)</span></span></div><div class="line">    <span class="keyword">return</span> point:generalPointString()</div><div class="line"><span class="keyword">end</span> </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">-- Pathfinding 2D</span></div><div class="line"><span class="keyword">local</span> Pathfinding = class(<span class="string">"Pathfinding"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:ctor</span><span class="params">(mapData,reachableFunction)</span></span></div><div class="line">    self.m_openList = &#123;&#125;</div><div class="line">    self.m_closedList = &#123;&#125;</div><div class="line">    self:setMapData(mapData)</div><div class="line">    self:setReachableFunction(reachableFunction)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">-- private functions</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:listAddPoint_</span><span class="params">(list,point)</span></span></div><div class="line">    ASSERT_FUNC(<span class="built_in">type</span>(list) == <span class="string">'table'</span> <span class="keyword">and</span> iskindof(point,<span class="string">"PathPoint"</span>))</div><div class="line">    list[point:ID()] = point</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:listRemovePoint_</span><span class="params">(list,point)</span></span></div><div class="line">    ASSERT_FUNC(<span class="built_in">type</span>(list) == <span class="string">'table'</span> <span class="keyword">and</span> iskindof(point,<span class="string">"PathPoint"</span>))</div><div class="line">    <span class="keyword">if</span> list[point:ID()] <span class="keyword">then</span> list[point:ID()] = <span class="literal">nil</span> <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:listGetMinFPoint</span><span class="params">(list)</span></span></div><div class="line">    ASSERT_FUNC(<span class="built_in">type</span>(list) == <span class="string">'table'</span>)</div><div class="line">    <span class="keyword">local</span> __,ret = <span class="built_in">next</span>(list)</div><div class="line">    <span class="keyword">for</span> __,p <span class="keyword">in</span> <span class="built_in">pairs</span>(list) <span class="keyword">do</span></div><div class="line">        <span class="keyword">if</span> iskindof(p, <span class="string">"PathPoint"</span>) <span class="keyword">then</span></div><div class="line">            <span class="keyword">if</span> p:getF() &lt; ret:getF() <span class="keyword">then</span></div><div class="line">                ret = p</div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> ret</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:listContainsPoint</span><span class="params">(list,point)</span></span></div><div class="line">    ASSERT_FUNC(<span class="built_in">type</span>(list) == <span class="string">'table'</span> <span class="keyword">and</span> iskindof(point,<span class="string">"PathPoint"</span>))</div><div class="line">    <span class="keyword">return</span> list[point:ID()]</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:listIsEmpty</span><span class="params">(list)</span></span></div><div class="line">    ASSERT_FUNC(<span class="built_in">type</span>(list) == <span class="string">'table'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">not</span> <span class="built_in">next</span>(list)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">-- logic private methods</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:canReach</span><span class="params">(point,x,y)</span></span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self:isReachableByXY(x,y)  <span class="keyword">or</span> self:isCloseListContainsPoint(PathPoint.new(x,y)) <span class="keyword">then</span> <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> math.abs(point:getX() - x) + math.abs(point:getY() - y) == <span class="number">1</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:getSurroundPoints</span><span class="params">(point)</span></span></div><div class="line">    ASSERT_FUNC(iskindof(point,<span class="string">"PathPoint"</span>))</div><div class="line">    <span class="keyword">local</span> ret = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> x = point:getX()<span class="number">-1</span>,point:getX()+<span class="number">1</span> <span class="keyword">do</span></div><div class="line">        <span class="keyword">for</span> y = point:getY()<span class="number">-1</span>,point:getY()+<span class="number">1</span> <span class="keyword">do</span></div><div class="line">            <span class="keyword">if</span> self:canReach(point,x,y) <span class="keyword">then</span></div><div class="line">                table.insert(ret, PathPoint.new(x,y))</div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> ret</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:closeListAddPoint</span><span class="params">(point)</span></span></div><div class="line">    ASSERT_FUNC(iskindof(point,<span class="string">"PathPoint"</span>))</div><div class="line">    self:listAddPoint_(self.m_closedList, point)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:isCloseListContainsPoint</span><span class="params">(point)</span></span></div><div class="line">    ASSERT_FUNC(iskindof(point,<span class="string">"PathPoint"</span>))</div><div class="line">    <span class="keyword">return</span> self:listContainsPoint(self.m_closedList,point)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:openListMinFPoint</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">return</span> self:listGetMinFPoint(self.m_openList)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:openListAddPoint</span><span class="params">(point)</span></span></div><div class="line">    ASSERT_FUNC(iskindof(point,<span class="string">"PathPoint"</span>))</div><div class="line">    self:listAddPoint_(self.m_openList, point)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:isOpenListIsEmpty</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">return</span> self:listIsEmpty(self.m_openList)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:openListRemovePoint</span><span class="params">(point)</span></span></div><div class="line">    ASSERT_FUNC(iskindof(point,<span class="string">"PathPoint"</span>))</div><div class="line">    <span class="keyword">return</span> self:listRemovePoint_(self.m_openList, point)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:isOpenListContainsPoint</span><span class="params">(point)</span></span></div><div class="line">    ASSERT_FUNC(iskindof(point,<span class="string">"PathPoint"</span>))</div><div class="line">    <span class="keyword">return</span> self:listContainsPoint(self.m_openList,point)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:getOpenListMinFPoint</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">return</span> self:listGetMinFPoint(self.m_openList)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:getMapItemDataByXY</span><span class="params">(x,y)</span></span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.m_mapData <span class="keyword">or</span> <span class="keyword">not</span> self.m_mapData[<span class="built_in">tonumber</span>(x)] <span class="keyword">or</span> <span class="keyword">not</span> self.m_mapData[<span class="built_in">tonumber</span>(x)][<span class="built_in">tonumber</span>(y)] <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> self.m_mapData[<span class="built_in">tonumber</span>(x)][<span class="built_in">tonumber</span>(y)]</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:isReachableByXY</span><span class="params">(x,y)</span></span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.m_reachableFunc <span class="keyword">then</span> <span class="keyword">return</span> <span class="literal">true</span> <span class="keyword">end</span> <span class="comment">-- if reachable function is not set,we want all postions are reachable.</span></div><div class="line">    <span class="keyword">local</span> itemData = self:getMapItemDataByXY(x,y)</div><div class="line">    <span class="keyword">return</span> itemData <span class="keyword">and</span> self.m_reachableFunc(itemData)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:isPointReadchable</span><span class="params">(point)</span></span></div><div class="line">    ASSERT_FUNC(iskindof(point,<span class="string">"PathPoint"</span>))</div><div class="line">    <span class="keyword">return</span> self:isReachableByXY(point:getX(),point:getY())</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:calcG</span><span class="params">(start,point)</span></span></div><div class="line">    <span class="keyword">local</span> G = <span class="number">1</span></div><div class="line">    <span class="keyword">local</span> parentG = point:getParent() <span class="keyword">and</span> point:getParent():getG() <span class="keyword">or</span> <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> G + parentG</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:calcH</span><span class="params">(endP,point)</span></span></div><div class="line">    <span class="keyword">return</span> math.abs(point:getX() - endP:getX()) + math.abs(point:getY() - endP:getY())</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:notFoundPoint</span><span class="params">(tempStart,endP,point)</span></span></div><div class="line">    point:setParent(tempStart)</div><div class="line">    point:setG(self:calcG(tempStart,point))</div><div class="line">    point:setH(self:calcH(endP,point))</div><div class="line">    self:openListAddPoint(point)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:foundPoint</span><span class="params">(tempStart,point)</span></span></div><div class="line">    <span class="keyword">local</span> G = self:calcG(tempStart,point)</div><div class="line">    <span class="keyword">if</span> G &lt; point:getG() <span class="keyword">then</span></div><div class="line">        point:setParent(tempStart)</div><div class="line">        point:setG(G)</div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:generatePoints</span><span class="params">(point)</span></span></div><div class="line">    <span class="keyword">local</span> ret = &#123;&#125;</div><div class="line">    <span class="keyword">if</span> point <span class="keyword">then</span></div><div class="line">        <span class="keyword">while</span> point <span class="keyword">do</span></div><div class="line">            table.insert(ret, point)</div><div class="line">            point = point:getParent()</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> ret</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">-- public api</span></div><div class="line"><span class="comment">------------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:setReachableFunction</span><span class="params">(func)</span></span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> func <span class="keyword">then</span> <span class="keyword">return</span> <span class="keyword">end</span></div><div class="line">    ASSERT_FUNC(<span class="built_in">type</span>(func) == <span class="string">'function'</span>)</div><div class="line">    self.m_reachableFunc = func</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:setMapData</span><span class="params">(mapData)</span></span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mapData <span class="keyword">then</span> <span class="keyword">return</span> <span class="keyword">end</span></div><div class="line">    ASSERT_FUNC(<span class="built_in">type</span>(mapData) == <span class="string">'table'</span>)</div><div class="line">    self.m_mapData = mapData</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pathfinding:findPath</span><span class="params">(startPoint,endPoint)</span></span></div><div class="line">    self:openListAddPoint(startPoint)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">not</span> self:isOpenListIsEmpty() <span class="keyword">do</span></div><div class="line">        <span class="keyword">local</span> tempPoint = self:openListMinFPoint()</div><div class="line">        self:openListRemovePoint(tempPoint)</div><div class="line">        self:closeListAddPoint(tempPoint)</div><div class="line">        <span class="keyword">if</span> self:isCloseListContainsPoint(endPoint) <span class="keyword">then</span></div><div class="line">            <span class="keyword">return</span> endPoint</div><div class="line">        <span class="keyword">end</span></div><div class="line">        <span class="keyword">local</span> surroundPoints = self:getSurroundPoints(tempPoint)</div><div class="line">        <span class="keyword">for</span> __,point <span class="keyword">in</span> <span class="built_in">ipairs</span>(surroundPoints) <span class="keyword">do</span></div><div class="line">            <span class="keyword">if</span> self:isOpenListContainsPoint(point) <span class="keyword">then</span></div><div class="line">                self:foundPoint(tempPoint, point)</div><div class="line">            <span class="keyword">else</span></div><div class="line">                self:notFoundPoint(tempPoint, endPoint, point)</div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">        <span class="keyword">if</span> self:isOpenListContainsPoint(endPoint) <span class="keyword">then</span></div><div class="line">            <span class="keyword">return</span> self:isOpenListContainsPoint(endPoint)</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> self:isOpenListContainsPoint(endPoint)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"></div><div class="line">Pathfinding.PathPoint = PathPoint</div><div class="line"></div><div class="line"><span class="keyword">return</span> Pathfinding</div></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> Pathfinding = <span class="built_in">require</span>(<span class="string">"Pathfinding"</span>)</div><div class="line"><span class="keyword">local</span> PathPoint = Pathfinding.PathPoint</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generalMapData</span><span class="params">()</span></span></div><div class="line">	<span class="keyword">local</span> map = &#123;</div><div class="line">		&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</div><div class="line">		&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</div><div class="line">		&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</div><div class="line">		&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</div><div class="line">		&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</div><div class="line">		&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> map</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dumpMap</span><span class="params">(map)</span></span></div><div class="line">	<span class="built_in">print</span>(<span class="string">"------------"</span>)</div><div class="line">	<span class="built_in">print</span>(<span class="string">"-- Map Data"</span>)</div><div class="line">	<span class="built_in">print</span>(<span class="string">"------------"</span>)</div><div class="line">	<span class="keyword">for</span> iR,row <span class="keyword">in</span> <span class="built_in">ipairs</span>(map) <span class="keyword">do</span></div><div class="line">		<span class="keyword">if</span> <span class="built_in">type</span>(row) ~= <span class="string">'table'</span> <span class="keyword">then</span> <span class="keyword">return</span> <span class="keyword">end</span></div><div class="line">		<span class="keyword">for</span> iC,column <span class="keyword">in</span> <span class="built_in">ipairs</span>(row) <span class="keyword">do</span></div><div class="line">			io.<span class="built_in">write</span>(string.format(<span class="string">"%s "</span>,<span class="built_in">tostring</span>(column)))</div><div class="line">		<span class="keyword">end</span></div><div class="line">		io.<span class="built_in">write</span>(<span class="string">"\n"</span>)</div><div class="line">	<span class="keyword">end</span></div><div class="line">	<span class="built_in">print</span>(<span class="string">"------------"</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> data = generalMapData()</div><div class="line">dumpMap(data)</div><div class="line"><span class="keyword">local</span> finder = Pathfinding.new(data,<span class="function"><span class="keyword">function</span><span class="params">(val)</span></span></div><div class="line">	<span class="keyword">return</span> val ~= <span class="number">1</span> </div><div class="line"><span class="keyword">end</span>)</div><div class="line"></div><div class="line"><span class="comment">-- test find way from 3,2 to 3,5</span></div><div class="line"><span class="keyword">local</span> retPoint = finder:findPath(PathPoint.new(<span class="number">3</span>,<span class="number">2</span>),PathPoint.new(<span class="number">3</span>,<span class="number">5</span>))</div><div class="line"><span class="keyword">if</span> retPoint <span class="keyword">then</span></div><div class="line">	<span class="keyword">while</span> retPoint <span class="keyword">do</span></div><div class="line">		data[retPoint:getX()][retPoint:getY()] = <span class="string">"*"</span></div><div class="line">		retPoint = retPoint:getParent()</div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line">dumpMap(data)</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Lua </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WindowsPhone的TextBox多行支持及疑问]]></title>
      <url>http://dannyhe.wang/2016/07/20/multiline-textbox-wp8-1/</url>
      <content type="html"><![CDATA[<p>最近在使用2dx的时候改造了一个<a href="https://github.com/cocos2d/cocos2d-x/blob/v3/cocos/ui/UIEditBox/UIEditBoxImpl-winrt.cpp" target="_blank" rel="external">UIEditBox</a>,使其支持多行输入,因为在Windows Phone上单行和多行输入都是使用同一个系统控件<code>TextBox</code>,关于如何使用多行输入,可以参考微软的<a href="https://msdn.microsoft.com/en-us/library/ms742157.aspx" target="_blank" rel="external">文档</a></p>
<p>当然Cocos2dx在3.5以上的版本中已经是使用cpp(cx)的开发模板,大意的代码如下:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">m_textBox-&gt;TextWrapping = <span class="symbol">Windows:</span><span class="symbol">:UI</span><span class="symbol">:</span><span class="symbol">:Xaml</span><span class="symbol">:</span><span class="symbol">:TextWrapping</span><span class="symbol">:</span><span class="symbol">:Wrap</span>;</div><div class="line">m_textBox-&gt;AcceptsReturn = <span class="keyword">true</span>;</div></pre></td></tr></table></figure>
<p>我们新加了一个类<code>UITextViewWinRT</code>提供系统的多行输入。</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">void UITextViewWinRT::SetupTextBox()</div><div class="line">&#123;</div><div class="line">	RemoveTextBox();</div><div class="line">	m_textBox = ref new TextBox;</div><div class="line">	</div><div class="line">	<span class="function"><span class="title">m_textBox</span>-&gt;</span>Name = <span class="string">"cocos2d_editbox_textbox"</span>;</div><div class="line">	<span class="function"><span class="title">m_textBox</span>-&gt;</span>MinWidth = <span class="number">200</span>;</div><div class="line">	<span class="function"><span class="title">m_textBox</span>-&gt;</span>PlaceholderText = m_strPlaceholder;</div><div class="line">	<span class="function"><span class="title">m_textBox</span>-&gt;</span>S<span class="function"><span class="title">elect</span>(m_textBox-&gt;</span>T<span class="function"><span class="title">ext</span>-&gt;</span>Length(), <span class="number">0</span>);</div><div class="line">	<span class="function"><span class="title">m_textBox</span>-&gt;</span>MaxLength = m_maxLength &lt; <span class="number">0</span> ? <span class="number">0</span> : m_maxLength;</div><div class="line">	<span class="function"><span class="title">m_textBox</span>-&gt;</span>MinHeight = <span class="number">100</span>;</div><div class="line">	<span class="function"><span class="title">m_textBox</span>-&gt;</span>MaxHeight = <span class="number">200</span>;</div><div class="line">	<span class="function"><span class="title">m_textBox</span>-&gt;</span>TextWrapping = Windows::UI::Xaml::TextWrapping::Wrap;</div><div class="line">	<span class="function"><span class="title">m_textBox</span>-&gt;</span>AcceptsReturn = <span class="literal">true</span>;</div><div class="line"></div><div class="line">	SetInputScope(m_textBox, m_inputMode);</div><div class="line">	<span class="function"><span class="title">m_textBox</span>-&gt;</span>Text = m_strText; <span class="comment">//注意这行</span></div><div class="line">	<span class="function"><span class="title">auto</span> g = findXamlElement(m_flyout-&gt;</span>Content, <span class="string">"cocos2d_editbox_grid"</span>);</div><div class="line">	auto grid = dynamic_cast&lt;Grid^&gt;(g);</div><div class="line">	<span class="function"><span class="title">grid</span>-&gt;</span>C<span class="function"><span class="title">hildren</span>-&gt;</span>InsertAt(<span class="number">0</span>, m_textBox);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果阅读过官方的<code>UIEditBoxImpl-winrt.cpp</code>加上细心的同学会注意<code>m_textBox-&gt;Text = m_strText; //注意这行</code>这行代码,因为我将这段代码放到设置<code>TextBox</code>支持多行输出的代码后面了。</p>
<p><strong>如果不这样的的话,如果你给<code>TextBox</code>设置多行文本的时候是无效的</strong>,猜想可能是系统在设置其文本属性的时候计算了文本的摆放的结构,当渲染的时候进行渲染.<br>Windows Phone的换行符为<code>\r\n</code>不是一般的<code>\n</code>,这会引起新的问题,2dx里将<code>unicode</code>码转化成<code>UTF8</code>在<code>Label</code>里显示<code>\r</code>会被显示为乱码！<br><a id="more"></a><br>我的修改方案是</p>
<ul>
<li><p>Platform::String(unicode)转为std::string(UTF8)的时候移除<code>\r</code>,因为在2dx的<code>Label</code>里<code>\n</code>就是表示换行</p>
</li>
<li><p>std::string转为Platform::String的时候将<code>\n</code>替换为<code>\r\n</code>,让系统控件识别换行</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span>&amp;   <span class="title">replace_all_distinct</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>&amp;   str, <span class="keyword">const</span>   <span class="built_in">std</span>::<span class="built_in">string</span>&amp;   old_value, <span class="keyword">const</span>  <span class="built_in">std</span>::<span class="built_in">string</span>&amp;   new_value)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">string</span>::size_type pos(<span class="number">0</span>); pos != <span class="built_in">std</span>::<span class="built_in">string</span>::npos; pos += new_value.length())   &#123;</div><div class="line">		<span class="keyword">if</span> ((pos = str.find(old_value, pos)) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</div><div class="line">			str.replace(pos, old_value.length(), new_value);</div><div class="line">		<span class="keyword">else</span>   <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span>   str;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Platform::String^ UITextViewImplWinrt::stringToPlatformString(<span class="built_in">std</span>::<span class="built_in">string</span> strSrc)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> newSrc = replace_all_distinct(strSrc, <span class="string">"\n"</span>, <span class="string">"\r\n"</span>);</div><div class="line">	<span class="comment">// to wide char</span></div><div class="line">	<span class="keyword">int</span> nStrLen = MultiByteToWideChar(CP_UTF8, <span class="number">0</span>, newSrc.c_str(), <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">	<span class="keyword">wchar_t</span>* pWStr = <span class="keyword">new</span> <span class="keyword">wchar_t</span>[nStrLen + <span class="number">1</span>];</div><div class="line">	<span class="built_in">memset</span>(pWStr, <span class="number">0</span>, nStrLen + <span class="number">1</span>);</div><div class="line">	MultiByteToWideChar(CP_UTF8, <span class="number">0</span>, newSrc.c_str(), <span class="number">-1</span>, pWStr, nStrLen);</div><div class="line">	Platform::String^ strDst = ref <span class="keyword">new</span> Platform::String(pWStr);</div><div class="line">	<span class="keyword">delete</span>[] pWStr;</div><div class="line">	<span class="keyword">return</span> strDst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> UITextViewImplWinrt::PlatformStringTostring(Platform::String^ strSrc)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">wchar_t</span>* pWStr = strSrc-&gt;Data();</div><div class="line">	<span class="keyword">int</span> nStrLen = WideCharToMultiByte(CP_UTF8, <span class="number">0</span>, pWStr, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">	<span class="keyword">char</span>* pStr = <span class="keyword">new</span> <span class="keyword">char</span>[nStrLen + <span class="number">1</span>];</div><div class="line">	<span class="built_in">memset</span>(pStr, <span class="number">0</span>, nStrLen + <span class="number">1</span>);</div><div class="line">	WideCharToMultiByte(CP_UTF8, <span class="number">0</span>, pWStr, <span class="number">-1</span>, pStr, nStrLen, <span class="literal">NULL</span>, <span class="literal">NULL</span>);;</div><div class="line"></div><div class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> strDst = <span class="built_in">std</span>::<span class="built_in">string</span>(pStr);</div><div class="line"></div><div class="line">	<span class="keyword">delete</span>[] pStr;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> ret = replace_all_distinct(strDst, <span class="string">"\r\n"</span>, <span class="string">"\n"</span>);</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Windows Phone </tag>
            
            <tag> Cocos2dx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cocos2dx在Android上使用ETC1+Alpha压缩纹理]]></title>
      <url>http://dannyhe.wang/2016/07/15/etc1-alpha-on-android-cocos2dx/</url>
      <content type="html"><![CDATA[<p>我们为了优化游戏的内存占用,会给图片资源进行<code>有损压缩</code>,在Android上则是使用<code>ETC1</code>(Ericsson texture compression)进行纹理压缩,压缩纹理无论从加载速度(GPU识别)和内存占用都有很大的优势,唯一的缺点就是有损。<br>也就是它不是<code>万金油</code>,并不是所有的图片都能使用<code>ETC1</code>压缩。我在记录下我是如何在<code>Cocos2dx</code>中使用<code>ETC1</code>进行纹理压缩.当然这里是在<code>android</code>平台下使用。</p>
<h1 id="为什么是ETC1"><a href="#为什么是ETC1" class="headerlink" title="为什么是ETC1"></a>为什么是ETC1</h1><p>ETC1格式是OpenGL ES图形标准的一部分，并且被所有的Android设备所支持,不支持透明通道。需要是POT纹理。虽然后面的<code>ETC2</code>支持透明通道,但是它是<code>OpenGL 3.0</code>的标准，并不能被所有Android设备所支持，而<code>ETC1</code>我们能通过技术手段加入透明通道。参考这篇<a href="http://malideveloper.arm.com/resources/sample-code/etcv1-texture-compression-and-alpha-channels/" target="_blank" rel="external">文章</a></p>
<h1 id="之前的准备"><a href="#之前的准备" class="headerlink" title="之前的准备"></a>之前的准备</h1><p><img src="http://malideveloper.arm.com/wp-content/uploads/2010/09/sample_code_alpha_seperate.jpg" alt="ETC1"></p>
<p>我采用将一张纹理分割成两张图的方案,也就是<code>图片 = RGB部分纹理+Alpha部分纹理</code>。因为纹理大小由于硬件和操作系统原因是有限制的,<code>2048x2048</code>基本能被主流设备所认同，如果采用Alpha拼接的方式,原本2048的纹理最终大小会超过2048,如果所有纹理加上最大尺寸1024的限制又会使纹理数量增多.所以最终我选择了分割图片的方案。<br><a id="more"></a></p>
<h2 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h2><p>使用<a href="http://www.imagemagick.org/script/index.php" target="_blank" rel="external">ImageMagick</a>来分割纹理的RGB和Alpha部分,为什么没有用<code>Mali GPU Texture Compression</code>直接生成呢?因为它生成的最终的<code>pkm</code>文件是经过压缩的,压缩率并不理想。所以后面我会介绍我使用<code>zlib</code>来压缩生成的<code>ETC1</code>格式的纹理。</p>
<p>分离RGB部分</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">convert</span> <span class="selector-tag">logo</span><span class="selector-class">.png</span> <span class="selector-tag">-alpha</span> <span class="selector-tag">Off</span> <span class="selector-tag">logo_rgb</span><span class="selector-class">.png</span></div></pre></td></tr></table></figure>
<p>分离Alpha部分</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">convert</span> <span class="selector-tag">logo</span><span class="selector-class">.png</span> <span class="selector-tag">-channel</span> <span class="selector-tag">A</span> <span class="selector-tag">-alpha</span> <span class="selector-tag">extract</span> <span class="selector-tag">logo_a</span><span class="selector-class">.png</span></div></pre></td></tr></table></figure>
<h2 id="PVRTexTool"><a href="#PVRTexTool" class="headerlink" title="PVRTexTool"></a>PVRTexTool</h2><p>使用<a href="https://community.imgtec.com/developers/powervr/tools/pvrtextool/" target="_blank" rel="external">PVRTexTool</a>压缩ETC1纹理,注意这里生成的文件的后缀是<code>pvr</code>，其实它的格式是<code>ETC1</code></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PVRTexTool -f ETC1 -<span class="selector-tag">i</span> logo_rgb<span class="selector-class">.png</span> -o logo_rgb<span class="selector-class">.pvr</span> -<span class="selector-tag">q</span> etcfast</div><div class="line">PVRTexTool -f ETC1 -<span class="selector-tag">i</span> logo_a<span class="selector-class">.png</span> -o logo_a<span class="selector-class">.pvr</span> -<span class="selector-tag">q</span> etcfast</div></pre></td></tr></table></figure>
<p>现在<code>logo_rgb.pvr</code>和<code>logo_a.pvr</code>已经是我们需要的<code>ETC1</code>格式的纹理了,但是你会发现它们比转换之前的文件大小大了很多:(<br>不能增加我们的包大小是不?所以我们先使用<code>zlib</code>来压缩下他们,为什么使用<code>zlib</code>? 因为2dx里已经有<code>zlib</code>库(记得iOS里的<code>xx.pvr</code>和<code>xx.pvr.ccz</code>吧,ccz其实就被zlib压缩过后的<code>PVRTC4</code>纹理),我们不用引入其他库,偷个懒:),当然我们也可以使用其他压缩算法，比如<code>梦幻西游</code>。听他们的开发说,使用的是<code>lzma</code>解压资源,但是它的解压速度会稍慢,但是压缩率比较高,这就需要你自己取舍了。</p>
<h2 id="压缩纹理"><a href="#压缩纹理" class="headerlink" title="压缩纹理"></a>压缩纹理</h2><blockquote>
<p>我们需要一个工具,他能将纹理使用zlib压缩成一个2dx能识别的压缩格式,或者我们能在代码里能识别的文件.</p>
</blockquote>
<p>我们可以仿照pvr.ccz的策略,修改我们最终生成压缩文件的文件头信息,告诉2dx使用zlib来解压它。定义一个8个字节的结构体，表示我们的头信息.cpp中的结构体是连续的内存分配:)</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> <span class="type">ZipHeaderInfo</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">char</span> <span class="keyword">sig</span>[<span class="number">4</span>];</div><div class="line">    <span class="built_in">int</span> fileSize;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>前四个char分别为<code>!</code>,<code>E</code>,<code>T</code>,<code>C</code>,后面的<code>int</code>用来存储文件的原始大小。</p>
<p>最终的源码如下:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  CompressETCTexture</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by DannyHe on 9/16/15.</span></div><div class="line"><span class="comment">//  Copyright (c) 2015 DannyHe. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ETCCompress.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> ZipHeaderInfo</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> sig[<span class="number">4</span>];</div><div class="line">    <span class="keyword">int</span> fileSize;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ETCCompress::compressETC(<span class="keyword">const</span> <span class="keyword">char</span> * destpath,<span class="keyword">const</span> <span class="keyword">char</span> *srcpath)</div><div class="line">&#123;</div><div class="line">    ZipHeaderInfo zipHeader;</div><div class="line">    </div><div class="line">    </div><div class="line">    FILE* inFile = fopen(srcpath, <span class="string">"rb"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!inFile)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    fseek(inFile, <span class="number">0</span>, SEEK_END);</div><div class="line">    <span class="keyword">int</span> fileSize = ftell(inFile);</div><div class="line">    <span class="keyword">char</span> * fileData = <span class="keyword">new</span> <span class="keyword">char</span>[fileSize];</div><div class="line">    fseek(inFile, <span class="number">0</span>, SEEK_SET);</div><div class="line">    fread(fileData, <span class="number">1</span>, fileSize, inFile);</div><div class="line">    fclose(inFile);</div><div class="line">    zipHeader.fileSize = fileSize;</div><div class="line">    zipHeader.sig[<span class="number">0</span>] = <span class="string">'!'</span>;</div><div class="line">    zipHeader.sig[<span class="number">1</span>] = <span class="string">'E'</span>;</div><div class="line">    zipHeader.sig[<span class="number">2</span>] = <span class="string">'T'</span>;</div><div class="line">    zipHeader.sig[<span class="number">3</span>] = <span class="string">'C'</span>;</div><div class="line">    </div><div class="line">    uLongf destLength = compressBound(fileSize);</div><div class="line"></div><div class="line">    Bytef* pDestBuf = <span class="keyword">new</span> Bytef[destLength];</div><div class="line">    <span class="keyword">int</span> result = compress2(pDestBuf , &amp;destLength, (<span class="keyword">const</span> Bytef*)fileData, fileSize,<span class="number">9</span>);</div><div class="line">    <span class="keyword">if</span> (result != Z_OK)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">switch</span>(result)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">case</span> Z_MEM_ERROR:</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"ETCCompress:: note enough memory for compression"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">                </div><div class="line">            <span class="keyword">case</span> Z_BUF_ERROR:</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"ETCCompress:: note enough room in buffer to compress the data"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ETCCompress:: orignal size: "</span> &lt;&lt; fileSize &lt;&lt; <span class="string">" bytes"</span></div><div class="line">    &lt;&lt; <span class="string">" , compressed size : "</span> &lt;&lt; destLength &lt;&lt; <span class="string">" bytes"</span></div><div class="line">    &lt;&lt; <span class="string">" , header size: "</span> &lt;&lt; <span class="keyword">sizeof</span>(zipHeader) &lt;&lt; <span class="string">" bytes"</span></div><div class="line">    &lt;&lt; <span class="string">" , final size : "</span> &lt;&lt; <span class="keyword">sizeof</span>(zipHeader) + destLength &lt;&lt; <span class="string">" bytes"</span></div><div class="line">    &lt;&lt; <span class="string">" , compress ratio:"</span> &lt;&lt; (<span class="number">1</span> - (<span class="keyword">double</span>)(<span class="keyword">sizeof</span>(zipHeader) + destLength)/fileSize)*<span class="number">100</span> &lt;&lt; <span class="string">"%"</span></div><div class="line">    &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">    </div><div class="line">    </div><div class="line">    FILE* fo = fopen(destpath, <span class="string">"wb+"</span>);</div><div class="line">    <span class="keyword">if</span>(fo)</div><div class="line">    &#123;</div><div class="line">        fwrite(&amp;zipHeader, <span class="keyword">sizeof</span>(zipHeader), <span class="number">1</span>, fo);</div><div class="line">        fwrite(pDestBuf,destLength, <span class="number">1</span>, fo);</div><div class="line">        fclose(fo);</div><div class="line">        <span class="keyword">delete</span> [] pDestBuf;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">uLongf ETCCompress::unCompressETC(<span class="keyword">const</span> <span class="keyword">char</span> * packData,<span class="keyword">int</span> packSize,Bytef* &amp;buff)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> ZipHeaderInfo *header = (<span class="keyword">struct</span> ZipHeaderInfo*) packData;</div><div class="line">    <span class="keyword">if</span> (!(header-&gt;sig[<span class="number">0</span>] == <span class="string">'!'</span> &amp;&amp; header-&gt;sig[<span class="number">1</span>] == <span class="string">'E'</span> &amp;&amp; header-&gt;sig[<span class="number">2</span>] == <span class="string">'T'</span> &amp;&amp; header-&gt;sig[<span class="number">3</span>] == <span class="string">'C'</span>)) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\nETCCompress:: header error"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> orginSize = header-&gt;fileSize;</div><div class="line">    <span class="keyword">int</span> headerSize = <span class="keyword">sizeof</span>(*header);</div><div class="line">    uLongf newSize = orginSize;</div><div class="line">    Bytef* pUnBuf = <span class="keyword">new</span> Bytef[newSize];</div><div class="line">    <span class="keyword">int</span> result2 = uncompress(pUnBuf, &amp;newSize,(<span class="keyword">const</span> Bytef*)packData + headerSize,packSize - headerSize);</div><div class="line">    <span class="keyword">if</span> (result2 != Z_OK)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">switch</span>(result2)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">case</span> Z_MEM_ERROR:</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"ETCCompress:: note enough memory for uncompression"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">                </div><div class="line">            <span class="keyword">case</span> Z_BUF_ERROR:</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"ETCCompress:: note enough room in buffer to uncompress the data"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    buff = pUnBuf;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"orignal size: "</span> &lt;&lt; packSize &lt;&lt; <span class="string">" bytes"</span> </div><div class="line">    &lt;&lt; <span class="string">" , ucompressed size : "</span> &lt;&lt; orginSize &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">    <span class="keyword">return</span> newSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ETCCompress::unCompressETC(<span class="keyword">const</span> <span class="keyword">char</span> *destpath, <span class="keyword">const</span> <span class="keyword">char</span> *srcpath)</div><div class="line">&#123;</div><div class="line">    FILE* packFile = fopen(srcpath, <span class="string">"rb"</span>);</div><div class="line">    </div><div class="line">    fseek(packFile, <span class="number">0</span>, SEEK_END);</div><div class="line">    <span class="keyword">int</span> packSize = ftell(packFile);</div><div class="line">    <span class="keyword">char</span> * packData = <span class="keyword">new</span> <span class="keyword">char</span>[packSize];</div><div class="line">    fseek(packFile, <span class="number">0</span>, SEEK_SET);</div><div class="line">    fread(packData, <span class="number">1</span>, packSize, packFile);</div><div class="line">    fclose(packFile);</div><div class="line">    Bytef* pUnBuf;</div><div class="line">    uLongf newSize = unCompressETC(packData,packSize,pUnBuf);</div><div class="line">    <span class="keyword">if</span> (newSize == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\nETCCompress:: uncompress error!"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    FILE* ft = fopen(destpath, <span class="string">"wb+"</span>);</div><div class="line">    <span class="keyword">if</span>(ft)</div><div class="line">    &#123;</div><div class="line">        fwrite(pUnBuf,newSize, <span class="number">1</span>, ft);</div><div class="line">        fclose(ft);</div><div class="line">        <span class="keyword">delete</span> [] pUnBuf;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多详细的代码及编译可以看我之前的<a href="http://dannyhe.wang/2015/12/15/how-to-copy-file-in-cmake/">这篇文章</a>和<a href="https://github.com/dannyjiajia/ETCCompress" target="_blank" rel="external">仓库</a><br>然后我们使用我们写的工具压缩我们的纹理</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CompressETCTexture pack logo_rgb<span class="selector-class">.pvr</span> logo_rgb<span class="selector-class">.png</span></div><div class="line">CompressETCTexture pack logo_a<span class="selector-class">.pvr</span> logo_a.png</div></pre></td></tr></table></figure>
<p>最后我们得到两个文件<code>logo_rgb.png</code>和<code>logo_a.png</code>,这两个文件经过了<code>ETC1</code>压缩并且文件大小也是我们能接受的范围,然后我们需要在<code>Cocos2dx</code>中使用他们。</p>
<h2 id="2dx-3-x-中解压"><a href="#2dx-3-x-中解压" class="headerlink" title="2dx(3.x)中解压"></a>2dx(3.x)中解压</h2><p>我们在<code>ZipUtils</code>类中加入我们的解压逻辑<br>头文件<code>ZipUtils.h</code>中声明我们的头信息结构体和解压函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> CC_USE_ETC1_ZLIB</span></div><div class="line">    <span class="keyword">struct</span> ETCCompressedHeader&#123;</div><div class="line">        <span class="keyword">char</span> sig[<span class="number">4</span>];</div><div class="line">        <span class="keyword">int</span> fileSize;</div><div class="line">    &#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> CC_USE_ETC1_ZLIB</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">isETCCompressedBuffer</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buffer, <span class="keyword">ssize_t</span> len)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">inflateETCCompressedBuffer</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buffer, <span class="keyword">ssize_t</span> len, <span class="keyword">unsigned</span> <span class="keyword">char</span> **out)</span></span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>实现解压</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> CC_USE_ETC1_ZLIB</span></div><div class="line"><span class="keyword">bool</span> ZipUtils::isETCCompressedBuffer(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buffer, <span class="keyword">ssize_t</span> len)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(len) &lt; <span class="keyword">sizeof</span>(<span class="keyword">struct</span> ETCCompressedHeader))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">struct</span> ETCCompressedHeader *header = (<span class="keyword">struct</span> ETCCompressedHeader*) buffer;</div><div class="line">    <span class="keyword">return</span> header-&gt;sig[<span class="number">0</span>] == <span class="string">'!'</span> &amp;&amp; header-&gt;sig[<span class="number">1</span>] == <span class="string">'E'</span> &amp;&amp; header-&gt;sig[<span class="number">2</span>] == <span class="string">'T'</span> &amp;&amp; header-&gt;sig[<span class="number">3</span>] == <span class="string">'C'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ZipUtils::inflateETCCompressedBuffer(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buffer, <span class="keyword">ssize_t</span> bufferLen, <span class="keyword">unsigned</span> <span class="keyword">char</span> **out)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> ETCCompressedHeader *header = (<span class="keyword">struct</span> ETCCompressedHeader*) buffer;</div><div class="line">    <span class="keyword">int</span> len = header-&gt;fileSize;</div><div class="line">    </div><div class="line">    *out = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)<span class="built_in">malloc</span>( len );</div><div class="line">    <span class="keyword">if</span>(! *out )</div><div class="line">    &#123;</div><div class="line">        CCLOG(<span class="string">"cocos2d: ETCCompressed: Failed to allocate memory for texture"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    uLongf destlen = len;</div><div class="line">    <span class="keyword">int</span> ret = uncompress(*out, &amp;destlen, (Bytef*)buffer + <span class="keyword">sizeof</span>(*header), bufferLen - <span class="keyword">sizeof</span>(*header) );</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( ret != Z_OK )</div><div class="line">    &#123;</div><div class="line">        CCLOG(<span class="string">"cocos2d: ETCCompressed: Failed to uncompress data"</span>);</div><div class="line">        <span class="built_in">free</span>( *out );</div><div class="line">        *out = <span class="literal">nullptr</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> len;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>最后我们在2dx读取纹理文件的地方(<code>Image::initWithImageData</code>)调用我们的解压函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> CC_USE_ETC1_ZLIB</span></div><div class="line">    <span class="keyword">if</span>(ZipUtils::isETCCompressedBuffer(data,dataLen))</div><div class="line">    &#123;</div><div class="line">        CCLOG(<span class="string">"Image: Use our etc format compressed!"</span>);</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span>* etcUnpackedData = <span class="literal">nullptr</span>;</div><div class="line">        <span class="keyword">ssize_t</span> etcUnpackedLen = <span class="number">0</span>;</div><div class="line">        etcUnpackedLen = ZipUtils::inflateETCCompressedBuffer(data,dataLen,&amp;etcUnpackedData);</div><div class="line">        <span class="comment">//detecgt and unzip the compress file</span></div><div class="line">        <span class="keyword">if</span> (ZipUtils::isCCZBuffer(etcUnpackedData, etcUnpackedLen))</div><div class="line">        &#123;</div><div class="line">            unpackedLen = ZipUtils::inflateCCZBuffer(etcUnpackedData, etcUnpackedLen, &amp;unpackedData);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ZipUtils::isGZipBuffer(etcUnpackedData, etcUnpackedLen))</div><div class="line">        &#123;</div><div class="line">            unpackedLen = ZipUtils::inflateMemory(<span class="keyword">const_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>*&gt;(etcUnpackedData), etcUnpackedLen, &amp;unpackedData);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            unpackedData = <span class="keyword">const_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>*&gt;(etcUnpackedData);</div><div class="line">            unpackedLen = etcUnpackedLen;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(etcUnpackedData != unpackedData)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">free</span>(etcUnpackedData);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//detecgt and unzip the compress file</span></div><div class="line">        <span class="keyword">if</span> (ZipUtils::isCCZBuffer(data, dataLen))</div><div class="line">        &#123;</div><div class="line">            unpackedLen = ZipUtils::inflateCCZBuffer(data, dataLen, &amp;unpackedData);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ZipUtils::isGZipBuffer(data, dataLen))</div><div class="line">        &#123;</div><div class="line">            unpackedLen = ZipUtils::inflateMemory(<span class="keyword">const_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>*&gt;(data), dataLen, &amp;unpackedData);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            unpackedData = <span class="keyword">const_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>*&gt;(data);</div><div class="line">            unpackedLen = dataLen;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="comment">//detecgt and unzip the compress file</span></div><div class="line">    <span class="keyword">if</span> (ZipUtils::isCCZBuffer(data, dataLen))</div><div class="line">    &#123;</div><div class="line">        unpackedLen = ZipUtils::inflateCCZBuffer(data, dataLen, &amp;unpackedData);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ZipUtils::isGZipBuffer(data, dataLen))</div><div class="line">    &#123;</div><div class="line">        unpackedLen = ZipUtils::inflateMemory(<span class="keyword">const_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>*&gt;(data), dataLen, &amp;unpackedData);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        unpackedData = <span class="keyword">const_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>*&gt;(data);</div><div class="line">        unpackedLen = dataLen;</div><div class="line">    &#125;        </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h1 id="2dx中使用ETC1"><a href="#2dx中使用ETC1" class="headerlink" title="2dx中使用ETC1"></a>2dx中使用ETC1</h1><p>我使用Shader来操作最中的Alpha,比如在<code>CCSprite</code>中，发现自己使用的纹理是<code>ETC1</code>格式便去查找Alpha纹理，如果发现便使用自己的Shader替换默认的Shader.<br>这样就做到对游戏以前的开发逻辑毫无修改。因为运用Shader的方式比较多，我这里就只列出我的Shader代码(CCSprite)</p>
<p>顶点不需要修改默认的</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> char* ccShader_etc1_PositionTextureColor_noMVP_vert = STRINGIFY(</div><div class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_position;</div><div class="line"><span class="keyword">attribute</span> <span class="type">vec2</span> a_texCoord;</div><div class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_color;</div><div class="line"></div><div class="line"><span class="keyword">varying</span> <span class="type">vec4</span> v_fragmentColor;</div><div class="line"><span class="keyword">varying</span> <span class="type">vec2</span> v_texCoord;</div><div class="line"></div><div class="line"></div><div class="line"><span class="type">void</span> main()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">gl_Position</span> = CC_PMatrix * a_position;</div><div class="line">    v_fragmentColor = a_color;</div><div class="line">    v_texCoord = a_texCoord;</div><div class="line">&#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>片段着色</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// u_texture1是etc的alpha数据也可以用ETC1压缩</span></div><div class="line"><span class="keyword">const</span> char* ccShader_etc1_PositionTextureColor_noMVP_frag = STRINGIFY(</div><div class="line">\n</div><div class="line"><span class="keyword">varying</span> <span class="type">vec4</span> v_fragmentColor;</div><div class="line"><span class="keyword">varying</span> <span class="type">vec2</span> v_texCoord;</div><div class="line"></div><div class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> u_texture1;</div><div class="line"></div><div class="line"><span class="type">void</span> main()</div><div class="line">&#123;</div><div class="line">    <span class="type">vec4</span> color = <span class="built_in">texture2D</span>(CC_Texture0, v_texCoord);</div><div class="line">    color.a = <span class="built_in">texture2D</span>(u_texture1, v_texCoord).r;</div><div class="line">    <span class="built_in">gl_FragColor</span> = color * v_fragmentColor; <span class="comment">//支持Cocos opacity</span></div><div class="line">&#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>使用的话大概只需这样</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">auto program = GLProgramCache::getInstance()-&gt;getGLProgram(GLProgram::SHADER_NAME_ETC_ALPHA_POSITION_TEXTURE_COLOR_NO_MVP); <span class="comment">//新加的etc shader</span></div><div class="line">auto etc_program_state = GLProgramState::create(program);</div><div class="line">etc_program_state-&gt;setUniformTexture(<span class="string">"u_texture1"</span>, texture_alpha);</div><div class="line">setGLProgramState(etc_program_state);</div></pre></td></tr></table></figure>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>如果还需要优化包大小,可以采用将PNG转换成两张JPG,也是RGB+ALPHA.<code>刀塔传奇</code>就有使用这种策略。我们还可以直接压缩<code>png</code>,使它的画质降低,比如<a href="https://pngquant.org/" target="_blank" rel="external">pngquant</a></p>
<p>另外上文中我们zlib压缩文件的小工具也可以来压缩其他文件,比如我们在<code>Windows Phone</code>平台使用的压缩纹理<code>DXT3</code>…<br>在发布<code>Android</code>的时候我们同样需要声明我们的游戏使用ETC压缩</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- we want the device support etc1 texture format --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">supports-gl-texture</span> <span class="attr">android:name</span>=<span class="string">"GL_OES_compressed_ETC1_RGB8_texture"</span> /&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> zlib </tag>
            
            <tag> Cocos2dx </tag>
            
            <tag> ETC </tag>
            
            <tag> Optimize </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[quick的ScrollView随想]]></title>
      <url>http://dannyhe.wang/2016/07/07/think-about-scrollview/</url>
      <content type="html"><![CDATA[<p>一直使用<code>quick</code>。之前一直忙着做项目,都没有空停下来好好想想OpenGL的一些知识.今天和同事分析了下<code>ClippingNode</code>的实现,记录在这里。</p>
<h3 id="quick的尴尬"><a href="#quick的尴尬" class="headerlink" title="quick的尴尬"></a>quick的尴尬</h3><p>quick用裁剪测试,实现了一个lua版的<code>UIScrollView.lua</code>,可以满足简单的裁剪和滑动需求.</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> UIScrollView = class(<span class="string">"UIScrollView"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">	<span class="keyword">return</span> display.newClippingRegionNode()</div><div class="line"><span class="keyword">end</span>)</div></pre></td></tr></table></figure>
<p>如果我们需要滑动列表能嵌套(横(竖)向中嵌入竖(横)向的列表),这个列表就不能满足我们的需求了.</p>
<p><code>ClippingRectangleNode</code>的核心实现是根据OpenGL的裁剪测试</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">glEnable(<span class="name">GL_SCISSOR_TEST</span>)<span class="comment">;</span></div><div class="line">glScissor(<span class="name">x</span>,y,width,height)<span class="comment">;</span></div><div class="line">glDisable(<span class="name">GL_SCISSOR_TEST</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<h3 id="ClippingNode原理"><a href="#ClippingNode原理" class="headerlink" title="ClippingNode原理"></a>ClippingNode原理</h3><p><code>ClippingNode</code>采用模板测试实现裁剪,可实现裁剪的嵌套.这里分析它的实现步骤。<br><a id="more"></a></p>
<h4 id="模板测试"><a href="#模板测试" class="headerlink" title="模板测试"></a>模板测试</h4><p>模板缓冲中的模板值(Stencil Value)通常是8位的，因此每个片段/像素共有256种不同的模板值，2dx在启动时便设置了这个值</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> GLViewImpl::initWithRect(<span class="keyword">const</span> std::<span class="keyword">string</span>&amp; viewName, Rect <span class="built_in">rect</span>, <span class="keyword">float</span> frameZoomFactor)</div><div class="line">&#123;</div><div class="line">    CGRect r = CGRectMake(<span class="built_in">rect</span>.origin.x, <span class="built_in">rect</span>.origin.y, <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>, <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>);</div><div class="line">    convertAttrs();</div><div class="line">    CCEAGLView *eaglview = [CCEAGLView viewWithFrame: r</div><div class="line">                                       pixelFormat: (NSString*)_pixelFormat</div><div class="line">                                       depthFormat: _depthFormat <span class="comment">//iOS上设置深度测试和模板测试的参数为GL_DEPTH24_STENCIL8_OES</span></div><div class="line">                                preserveBackbuffer: NO</div><div class="line">                                        sharegroup: nil</div><div class="line">                                     multiSampling: NO</div><div class="line">                                   numberOfSamples: <span class="number">0</span>];</div><div class="line"></div><div class="line">    [eaglview setMultipleTouchEnabled:YES];</div><div class="line"></div><div class="line">    _screenSize.<span class="built_in">width</span> = _designResolutionSize.<span class="built_in">width</span> = [eaglview getWidth];</div><div class="line">    _screenSize.<span class="built_in">height</span> = _designResolutionSize.<span class="built_in">height</span> = [eaglview getHeight];</div><div class="line"><span class="comment">//    _scaleX = _scaleY = [eaglview contentScaleFactor];</span></div><div class="line"></div><div class="line">    _eaglview = eaglview;</div><div class="line"></div><div class="line">    <span class="built_in">return</span> true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多信息可以参考<a href="http://learnOpenGL-cn.readthedocs.io/zh/latest/04%20Advanced%20OpenGL/02%20Stencil%20testing/" target="_blank" rel="external">这篇文章</a></p>
<h4 id="一般情况-不嵌套"><a href="#一般情况-不嵌套" class="headerlink" title="一般情况(不嵌套)"></a>一般情况(不嵌套)</h4><p>我们这里分析<code>_inverted</code>为<code>false</code>的情况,也就是保留裁剪区域内的内容的情况.</p>
<h5 id="onBeforeVisit"><a href="#onBeforeVisit" class="headerlink" title="onBeforeVisit"></a>onBeforeVisit</h5><p>开始绘制时,首先计算出这个<code>ClippingNode</code>的位遮罩(Bitmask)-<code>mask_layer</code></p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// increment the current layer</span></div><div class="line">s_layer++;</div><div class="line"></div><div class="line"><span class="comment">// mask of the current layer (ie: for layer 3: 00000100)</span></div><div class="line">GLint mask_layer = <span class="number">0</span>x1 &lt;&lt; s_layer;</div><div class="line"><span class="comment">// mask of all layers less than the current (ie: for layer 3: 00000011)</span></div><div class="line">GLint mask_layer_l = mask_layer - <span class="number">1</span>;</div><div class="line"><span class="comment">// mask of all layers less than or equal to the current (ie: for layer 3: 00000111)</span></div><div class="line">_mask_layer_le = mask_layer | mask_layer_l;</div></pre></td></tr></table></figure>
<p>s_layer = 0</p>
<p>mask_layer = 1</p>
<p>mask_layer_l = 0</p>
<p>_mask_layer_le = 1</p>
<p>然后保存下模板测试的当前的状态,接着开启模板测试，设置位遮罩</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// enable stencil use</span></div><div class="line"><span class="selector-tag">glEnable</span>(GL_STENCIL_TEST);</div><div class="line"><span class="comment">// check for OpenGL error while enabling stencil test</span></div><div class="line"><span class="selector-tag">CHECK_GL_ERROR_DEBUG</span>();</div><div class="line"></div><div class="line"><span class="comment">// all bits on the stencil buffer are readonly, except the current layer bit,</span></div><div class="line"><span class="comment">// this means that operation like glClear or glStencilOp will be masked with this value</span></div><div class="line"><span class="selector-tag">glStencilMask</span>(mask_layer);</div></pre></td></tr></table></figure>
<p><code>glStencilMask</code>设置的值为<code>0x1</code>,就是告诉缓冲对模板值的最后一位是可写的。</p>
<p>接着清空模板缓冲中的值，设置结果为<code>GL_NEVER</code>,永远不通过,不通过时执行<code>GL_ZERO</code>操作(<code>_inverted</code>为<code>false</code>),绘制一个全屏的矩形</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">glStencilFunc</span>(GL_NEVER, mask_layer, mask_layer);</div><div class="line"><span class="selector-tag">glStencilOp</span>(!_inverted ? <span class="attribute">GL_ZERO </span>: GL_REPLACE, GL_KEEP, GL_KEEP);</div><div class="line"></div><div class="line"><span class="selector-tag">drawFullScreenQuadClearStencil</span>();</div></pre></td></tr></table></figure>
<p>此时模板缓冲中的值为,假设下面的矩阵表示了一个屏幕中的所有模板缓冲值.<strong>也就是一个0表示的是8位二进制结果<code>0x00000000</code></strong></p>
<p>$$\begin{matrix} 0&amp;0&amp;0&amp;0&amp;0 \\ 0&amp;0&amp;0&amp;0&amp;0 \\ 0&amp;0&amp;0&amp;0&amp;0 \\ 0&amp;0&amp;0&amp;0&amp;0 \\ 0&amp;0&amp;0&amp;0&amp;0  \end{matrix}$$</p>
<p>然后开始准备画我们的<code>蒙版</code>,仍然是测试永远不通过,如果不通过执行<code>mask_layer</code>(0x1)的最后一位<code>替换</code>到模板值的最后一位</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">glStencilFunc</span>(GL_NEVER, mask_layer, mask_layer);</div><div class="line"><span class="selector-tag">glStencilOp</span>(!_inverted ? <span class="attribute">GL_REPLACE </span>: GL_ZERO, GL_KEEP, GL_KEEP);</div></pre></td></tr></table></figure>
<p>然后模板缓冲中的值为</p>
<p>$$\begin{matrix} 0&amp;0&amp;0&amp;0&amp;0 \\ 0&amp;1&amp;1&amp;1&amp;0 \\ 0&amp;1&amp;1&amp;1&amp;0 \\ 0&amp;1&amp;1&amp;1&amp;0 \\ 0&amp;0&amp;0&amp;0&amp;0  \end{matrix}$$</p>
<h5 id="onAfterDrawStencil"><a href="#onAfterDrawStencil" class="headerlink" title="onAfterDrawStencil"></a>onAfterDrawStencil</h5><p>在<code>蒙版</code>绘制完后,开始绘制子节点前设置测试操作</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">glStencilFunc(<span class="name">GL_EQUAL</span>, _mask_layer_le, _mask_layer_le)<span class="comment">;</span></div><div class="line">glStencilOp(<span class="name">GL_KEEP</span>, GL_KEEP, GL_KEEP)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>保留满足公式<code>(模板值 &amp; _mask_layer_le) == (_mask_layer_le &amp; _mask_layer_le)</code>的模板值片段,也就是上面图中得所有1位置的片段,也就是我们<code>蒙版</code>中的图像.<code>模板值 &amp; 1 == 1</code></p>
<h5 id="onAfterVisit"><a href="#onAfterVisit" class="headerlink" title="onAfterVisit"></a>onAfterVisit</h5><p>最后还原一开始保留的模板测试的状态,关闭模板测试<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">void ClippingNode::onAfterVisit()</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> DIRECTX_ENABLED == 0</span></div><div class="line">    <span class="comment">///////////////////////////////////</span></div><div class="line">    <span class="comment">// CLEANUP</span></div><div class="line"></div><div class="line">    <span class="comment">// manually restore the stencil state</span></div><div class="line">    glStencilFunc(<span class="variable">_currentStencilFunc</span>, <span class="variable">_currentStencilRef</span>, <span class="variable">_currentStencilValueMask</span>);</div><div class="line">    glStencilOp(<span class="variable">_currentStencilFail</span>, <span class="variable">_currentStencilPassDepthFail</span>, <span class="variable">_currentStencilPassDepthPass</span>);</div><div class="line">    glStencilMask(<span class="variable">_currentStencilWriteMask</span>);</div><div class="line">    <span class="keyword">if</span> (!<span class="variable">_currentStencilEnabled</span>)</div><div class="line">    &#123;</div><div class="line">        glDisable(GL_STENCIL_TEST);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// we are done using this layer, decrement</span></div><div class="line">    s_layer--;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="嵌套的情况"><a href="#嵌套的情况" class="headerlink" title="嵌套的情况"></a>嵌套的情况</h4><p>我们假设上面的<code>ClippingNode</code>有一个<code>ClippingNode</code>类型的<code>child</code><br>先绘制父节点,然后才绘制子节点<code>ClippingNode</code><br>也就是在父节点执行绘制子节点的时候,子节点<code>ClippingNode</code>会有下面的步骤</p>
<h5 id="onBeforeVisit-1"><a href="#onBeforeVisit-1" class="headerlink" title="onBeforeVisit"></a>onBeforeVisit</h5><p>s_layer = 1</p>
<p>mask_layer = 2</p>
<p>mask_layer_l = 1</p>
<p>_mask_layer_le = 3</p>
<p>$$\begin{matrix} 0&amp;0&amp;0&amp;0&amp;0 \\ 0&amp;1&amp;1&amp;1&amp;0 \\ 2&amp;3&amp;3&amp;3&amp;2 \\ 0&amp;1&amp;1&amp;1&amp;0 \\ 0&amp;0&amp;0&amp;0&amp;0  \end{matrix}$$</p>
<h5 id="onAfterDrawStencil-1"><a href="#onAfterDrawStencil-1" class="headerlink" title="onAfterDrawStencil"></a>onAfterDrawStencil</h5><p><code>(模板值 &amp; _mask_layer_le) == (_mask_layer_le &amp; _mask_layer_le)</code> $\to$ <code>(模板值 &amp; 3) == (3 &amp; 3)</code><br>也就是只有模板值为<code>3</code>的片段会被保留</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p><del>猜测下iOS中的<code>UIScrollView</code>也是基于模板测试,当然有可能不嵌套的时候也是使用的<code>glScissor</code>,毕竟模板测试会多两次drawcall.</del><br>最后如何改造<code>qucik</code>的<code>UIScrollView.lua</code></p>
<ol>
<li><p>继承<code>cc.ClippingNode</code></p>
</li>
<li><p><code>setViewRect</code>的实现修改为设置<code>setStencil</code></p>
</li>
<li><p>将<code>addTouchNode</code>中<code>node</code>设置为传递事件<code>setTouchSwallowEnabled(false)</code></p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Cocos2dx </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS(Core Graphics)和OpenGL里的矩阵运算]]></title>
      <url>http://dannyhe.wang/2016/07/04/matrix-ios-and-opengl/</url>
      <content type="html"><![CDATA[<p>总结下iOS和OpenGL里的矩阵计算</p>
<h4 id="iOS-Core-Graphics"><a href="#iOS-Core-Graphics" class="headerlink" title="iOS (Core Graphics)"></a>iOS (Core Graphics)</h4><p>iOS里面的矩阵用行向量表示,所以是矩阵右乘向量.</p>
<p>以<code>Quartz 2D</code>举例平移,因为是2d所以是一个3x3的矩阵,3d就是4x4</p>
<blockquote>
<p>补充:有朋友问我这里为什么变成了3x3的矩阵?3d则是4x4?</p>
<p>这里使用的齐次坐标。图形学引入齐次坐标的目的主要是合并矩阵运算中的乘法和加法，表示为p’ = p*M的形式。即它提供了用矩阵运算把二维、三维甚至高维空间中的一个点集从一个坐标系变换到另一个坐标系的有效方法。</p>
</blockquote>
<p>$$\begin{bmatrix} x&amp;y&amp;1 \end{bmatrix} \cdot  \begin{bmatrix} a&amp;b&amp;0 \\ c&amp;d&amp;0 \\ t_x&amp;t_y&amp;1 \end{bmatrix} = \begin{bmatrix} ax+cy+t_x&amp;bx+dy+t_y&amp;1 \end{bmatrix}$$</p>
<p>所以<code>CGAffineTransform CGAffineTransformMakeTranslation ( CGFloat tx, CGFloat ty );</code>是上面的公式中的<br><code>a=d=1</code>和<code>b=c=0</code></p>
<p>也就是矩阵$\begin{bmatrix} 1&amp;0&amp;0 \\ 0&amp;1&amp;0 \\ t_x&amp;t_y&amp;1 \end{bmatrix}$</p>
<p><strong>如果我们把这个公式用于3d</strong> 则是<code>CATransform3D</code></p>
<p>$$\begin{bmatrix} x&amp;y&amp;z&amp;1 \end{bmatrix} \cdot \begin{bmatrix} m11&amp;m12&amp;m13&amp;m14 \\ m21&amp;m22&amp;m23&amp;m24 \\ m31&amp;m32&amp;m33&amp;m34 \\ m41&amp;m42&amp;m43&amp;m44 \end{bmatrix} = \begin{bmatrix} x’&amp;y’&amp;z’&amp;1 \end{bmatrix}$$</p>
<p><code>m34</code>可以影响投影矩阵设置为$-1 \over d$表示向<code>z=d</code>的平面进行透视投影</p>
<h4 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h4><p>OpenGL使用列向量表示,所以是矩阵左乘向量.</p>
<p>$$<br>\begin{bmatrix} a&amp;b&amp;c&amp;d \\ e&amp;f&amp;g&amp;h \\ i&amp;j&amp;k&amp;l \\ m&amp;n&amp;o&amp;p \end{bmatrix} \cdot \begin{bmatrix} x\\ y \\ z \\ w \end{bmatrix} = \begin{bmatrix} ax+by+cz+dw \\ ex+fy+gz+hw \\ ix+jy+kz+lw \\ mx+ny+oz+pw\end{bmatrix}<br>$$</p>
<p>OpenGL的透视投影计算可以参考<a href="http://www.360doc.com/content/14/1028/10/19175681_420522154.shtml" target="_blank" rel="external">这篇文章</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(cpp)cx中将string转换成GUID]]></title>
      <url>http://dannyhe.wang/2016/06/24/cpp-convert-string-to-guid/</url>
      <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Windows::ApplicationModel::Store;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Windows::Foundation;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Windows::Foundation::Collections;</div><div class="line"></div><div class="line">Platform::String^ transactionId = <span class="string">"&#123;xxxxx&#125;"</span>; <span class="comment">//从微软的内购中获取的订单号字符串</span></div><div class="line">GUID guid;</div><div class="line">HRESULT hr = IIDFromString(transactionId-&gt;Data(), &amp;guid);</div><div class="line"><span class="keyword">if</span> (SUCCEEDED(hr)) &#123;</div><div class="line">	Platform::<span class="function">Guid <span class="title">guid_transactionId</span><span class="params">(guid)</span></span>;</div><div class="line">	<span class="keyword">auto</span> fuillAsync = CurrentApp::ReportConsumableFulfillmentAsync(productId, guid_transactionId); <span class="comment">//完成订单</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Windows Phone </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GCD与RunLoop]]></title>
      <url>http://dannyhe.wang/2016/06/24/gcd-and-runloop/</url>
      <content type="html"><![CDATA[<p>最近发现iOS中的RunLoop和GCD被讨论的挺多的,我也写点复习下:)</p>
<h3 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">dispatch_queue_t</span> globalQ = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="comment">/** 异步任务 **/</span></div><div class="line">    <span class="built_in">dispatch_async</span>(globalQ, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"async task"</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">/** 同步任务 **/</span></div><div class="line">    <span class="built_in">dispatch_sync</span>(globalQ, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"sync task"</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"sync end"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">/** 一次性执行 **/</span></div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"once task"</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">/**  延迟 2 秒执行 **/</span></div><div class="line">    <span class="keyword">double</span> delayInSeconds = <span class="number">2.0</span>;</div><div class="line">    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * <span class="built_in">NSEC_PER_SEC</span>);</div><div class="line">    dispatch_after(popTime, globalQ, ^(<span class="keyword">void</span>)&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"delay task"</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">/** global queue是并行的 **/</span></div><div class="line">    <span class="built_in">dispatch_async</span>(globalQ, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"global_queue_task_1"</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="built_in">dispatch_async</span>(globalQ, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"global_queue_task_2"</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">/** 自定义串行queue **/</span></div><div class="line">    <span class="built_in">dispatch_queue_t</span> customSerialQ = dispatch_queue_create(<span class="string">"customSerialQ"</span>, DISPATCH_QUEUE_SERIAL);</div><div class="line">    </div><div class="line">    <span class="built_in">dispatch_async</span>(customSerialQ, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"customSerialQ_task_1"</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="built_in">dispatch_async</span>(customSerialQ, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"customSerialQ_task_2"</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">/** 自定义并行queue **/</span></div><div class="line">    <span class="built_in">dispatch_queue_t</span> customConcurrentQ = dispatch_queue_create(<span class="string">"customConcurrentQ"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    </div><div class="line">    <span class="built_in">dispatch_async</span>(customConcurrentQ, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"customConcurrentQ_task_1"</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="built_in">dispatch_async</span>(customConcurrentQ, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"customConcurrentQ_task_2"</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">/** 并行任务归总 **/</span></div><div class="line">    </div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line">    dispatch_group_async(group, globalQ, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"并行执行的线程1"</span>);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, globalQ, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"并行执行的线程2"</span>);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_notify(group, globalQ, ^&#123;</div><div class="line">       <span class="built_in">NSLog</span>(<span class="string">@"并行执行任务完成"</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">/** dispatch_source **/</span></div><div class="line">    <span class="comment">//1. timer</span></div><div class="line">    </div><div class="line">    dispatch_source_t gcd_timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>,globalQ);</div><div class="line">    dispatch_source_set_timer(gcd_timer, DISPATCH_TIME_NOW, <span class="number">5</span>ull * <span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span>); <span class="comment">//5s</span></div><div class="line">    dispatch_source_set_event_handler(gcd_timer, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"gcd timer task"</span>);</div><div class="line">    &#125;);</div><div class="line">    dispatch_resume(gcd_timer);</div><div class="line"></div><div class="line">    <span class="comment">//2. 自定义source任务</span></div><div class="line">    dispatch_source_t gcd_source = dispatch_source_create(DISPATCH_SOURCE_TYPE_DATA_ADD, <span class="number">0</span>, <span class="number">0</span>,globalQ);</div><div class="line">    dispatch_source_set_event_handler(gcd_source, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"gcd source task"</span>);</div><div class="line">    &#125;);</div><div class="line">    dispatch_resume(gcd_source);</div><div class="line">    </div><div class="line">    <span class="comment">//2s后触发source任务</span></div><div class="line">    dispatch_after(popTime, globalQ, ^(<span class="keyword">void</span>)&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"fire gcd source task"</span>);</div><div class="line">        dispatch_source_merge_data(gcd_source, <span class="number">1</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">/** 信号量 **/</span></div><div class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">dispatch_async</span>(globalQ, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"完成信号量任务"</span>);</div><div class="line">        dispatch_semaphore_signal(semaphore);<span class="comment">//增加信号量</span></div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//设置超时时间</span></div><div class="line">    dispatch_time_t timeoutTime = dispatch_time(DISPATCH_TIME_NOW, <span class="number">1</span>ull*<span class="built_in">NSEC_PER_SEC</span>);</div><div class="line">    <span class="keyword">if</span> (dispatch_semaphore_wait(semaphore, timeoutTime)) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"信号量任务超时"</span>);</div><div class="line">    &#125;</div><div class="line">    dispatch_main(); <span class="comment">//执行提交到main queue中的blocks,在iOS和Mac的桌面应用你不需要调用</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="RunLoop"><a href="#RunLoop" class="headerlink" title="RunLoop"></a>RunLoop</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span></div><div class="line">_perform(<span class="keyword">void</span> *info __unused)</div><div class="line">&#123;</div><div class="line">    printf(<span class="string">"Source0 event\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span></div><div class="line">_timer(<span class="built_in">CFRunLoopTimerRef</span> timer __unused, <span class="keyword">void</span> *info)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Timer fire Source0"</span>);</div><div class="line">    <span class="built_in">CFRunLoopSourceSignal</span>(info);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">/** 注册observer **/</span></div><div class="line">    <span class="built_in">CFRunLoopRef</span> runLoop = <span class="built_in">CFRunLoopGetCurrent</span>();</div><div class="line">    <span class="built_in">CFStringRef</span> runLoopMode = kCFRunLoopDefaultMode;</div><div class="line">    <span class="built_in">CFRunLoopObserverRef</span> observer = <span class="built_in">CFRunLoopObserverCreateWithHandler</span>(kCFAllocatorDefault, kCFRunLoopAllActivities, <span class="literal">true</span>, <span class="number">0</span>, ^(<span class="built_in">CFRunLoopObserverRef</span> observer, <span class="built_in">CFRunLoopActivity</span> _) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"observer event:%lu"</span>,_);</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">CFRunLoopAddObserver</span>(runLoop, observer, runLoopMode);</div><div class="line">    </div><div class="line">    <span class="comment">/** Source 0 **/</span></div><div class="line">    <span class="built_in">CFRunLoopSourceRef</span> source;</div><div class="line">    <span class="built_in">CFRunLoopSourceContext</span> source_context;</div><div class="line">    bzero(&amp;source_context, <span class="keyword">sizeof</span>(source_context));</div><div class="line">    source_context.perform = _perform;</div><div class="line">    source = <span class="built_in">CFRunLoopSourceCreate</span>(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;source_context);</div><div class="line">    <span class="built_in">CFRunLoopAddSource</span>(<span class="built_in">CFRunLoopGetCurrent</span>(), source, kCFRunLoopDefaultMode);</div><div class="line">    </div><div class="line">    <span class="comment">//2s后触发source0</span></div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, <span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>), dispatch_get_main_queue(), ^(<span class="keyword">void</span>)&#123;</div><div class="line">        <span class="built_in">CFRunLoopSourceSignal</span>(source);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">/** Timer **/</span></div><div class="line"></div><div class="line">    <span class="built_in">CFRunLoopTimerRef</span> timer;</div><div class="line">    <span class="built_in">CFRunLoopTimerContext</span> timer_context;</div><div class="line">    bzero(&amp;timer_context, <span class="keyword">sizeof</span>(timer_context));</div><div class="line">    timer_context.info = source;</div><div class="line">    timer = <span class="built_in">CFRunLoopTimerCreate</span>(<span class="literal">NULL</span>, <span class="built_in">CFAbsoluteTimeGetCurrent</span>(), <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">                                 _timer, &amp;timer_context);</div><div class="line">    <span class="built_in">CFRunLoopAddTimer</span>(<span class="built_in">CFRunLoopGetCurrent</span>(), timer, kCFRunLoopDefaultMode);</div><div class="line">    <span class="built_in">CFRunLoopRun</span>();</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="我的总结"><a href="#我的总结" class="headerlink" title="我的总结"></a>我的总结</h3><ul>
<li>系统通过RunLoop执行主队列中的任务,这个RunLoop由<code>UIApplicationMain</code>或者<code>NSApplicationMain</code>或者<code>CFRunLoopRun</code>创建</li>
<li>两个不同的Timer,<code>NSTimer</code>依赖RunLoop来执行,GCD的Timer不需要RunLoop存在也能执行</li>
</ul>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>写的用例都是在Mac的命令行项目下测试的,感觉更能说明RunLoop的真实运行状态,比如测试<code>NSTimer</code>,如果不执行<code>CFRunLoopRun</code>,主线程是没有<code>RunLoop</code>的,<code>NSTimer</code>也会失效,而在<code>iOS</code>项目中,整个生命周期都是基于RunLoop,<code>NSTimer</code>也不会出现无效的情况.(指定特殊<code>Mode</code>的任务除外)</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> GCD </tag>
            
            <tag> RunLoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何计算git变动的文件大小]]></title>
      <url>http://dannyhe.wang/2016/05/12/calculate-git-changed-file-size/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># The tool to get the total size of autoupdate </span></div><div class="line"><span class="comment"># by Dannyhe</span></div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">NotSupport</span></span>()</div><div class="line">&#123;</div><div class="line">	<span class="built_in">echo</span> <span class="string">"Not support <span class="variable">$OSTYPE</span>"</span></div><div class="line">	<span class="built_in">exit</span> -1</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	<span class="built_in">echo</span> <span class="string">"os: <span class="variable">$OSTYPE</span>"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"size:"</span></div><div class="line">	<span class="keyword">if</span> [[ <span class="string">"<span class="variable">$OSTYPE</span>"</span> == <span class="string">"linux-gnu"</span> ]]; <span class="keyword">then</span></div><div class="line">	     NotSupport</div><div class="line">	<span class="keyword">elif</span> [[ <span class="string">"<span class="variable">$OSTYPE</span>"</span> == <span class="string">"darwin"</span>* ]]; <span class="keyword">then</span></div><div class="line">         <span class="comment"># Mac OSX</span></div><div class="line">	     git <span class="built_in">log</span> --name-status -1 | grep -E <span class="string">'^[A-Z]\b'</span> | sort -k 2,2 -u | grep -E <span class="string">"M|A"</span> | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">stat</span> <span class="_">-f</span> <span class="string">"%z"</span> | awk <span class="string">'&#123;t+=$0&#125;END&#123;print t/(1024*1024)" Mb"&#125;'</span></div><div class="line">	<span class="keyword">elif</span> [[ <span class="string">"<span class="variable">$OSTYPE</span>"</span> == <span class="string">"cygwin"</span> ]]; <span class="keyword">then</span></div><div class="line">        <span class="comment"># POSIX compatibility layer and Linux environment emulation for WindowsNotSupport</span></div><div class="line">        NotSupport</div><div class="line">	<span class="keyword">elif</span> [[ <span class="string">"<span class="variable">$OSTYPE</span>"</span> == <span class="string">"msys"</span> ]]; <span class="keyword">then</span></div><div class="line">        <span class="comment"># Lightweight shell and GNU utilities compiled for Windows (part of MinGW)</span></div><div class="line">        git <span class="built_in">log</span> --name-status -1 | grep -E <span class="string">'^[A-Z]\b'</span> | sort -k 2,2 -u | grep -E <span class="string">"M|A"</span> | awk <span class="string">'&#123;print $2&#125;'</span> | xargs du -b | awk <span class="string">'&#123;t+=$0&#125;END&#123;print t/(1024*1024)" Mb"&#125;'</span></div><div class="line">	<span class="keyword">elif</span> [[ <span class="string">"<span class="variable">$OSTYPE</span>"</span> == <span class="string">"freebsd"</span>* ]]; <span class="keyword">then</span></div><div class="line">		NotSupport</div><div class="line">	<span class="keyword">else</span></div><div class="line">		NotSupport</div><div class="line">	<span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">main</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> shell </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Text 3 Build 3103 License Key - CRACK]]></title>
      <url>http://dannyhe.wang/2016/05/01/sublime_crack/</url>
      <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">—– BEGIN LICENSE —–</div><div class="line">Michael Barnes</div><div class="line">Single User License</div><div class="line">EA7E<span class="number">-821385</span></div><div class="line"><span class="number">8</span>A353C41 <span class="number">872</span>A0D5C DF9B2950 AFF6F667</div><div class="line">C458EA6D <span class="number">8</span>EA3C286 <span class="number">98</span>D1D650 <span class="number">131</span>A97AB</div><div class="line">AA919AEC EF20E143 B361B1E7 <span class="number">4</span>C8B7F04</div><div class="line">B085E65E <span class="number">2</span>F5F5360 <span class="number">8489</span>D422 FB8FC1AA</div><div class="line"><span class="number">93</span>F6323C FD7F7544 <span class="number">3</span>F39C318 D95E6480</div><div class="line">FCCC7561 <span class="number">8</span>A4A1741 <span class="number">68</span>FA4223 ADCEDE07</div><div class="line"><span class="number">200</span>C25BE DBBC4855 C4CFB774 C5EC138C</div><div class="line"><span class="number">0</span>FEC1CEF D9DCECEC D3A5DAD1 <span class="number">01316</span>C36</div><div class="line">—— END LICENSE ——</div><div class="line"></div><div class="line">—– BEGIN LICENSE —–</div><div class="line">Nicolas Hennion</div><div class="line">Single User License</div><div class="line">EA7E<span class="number">-866075</span></div><div class="line"><span class="number">8</span>A01AA83 <span class="number">1</span>D668D24 <span class="number">4484</span>AEBC <span class="number">3</span>B04512C</div><div class="line"><span class="number">827</span>B0DE5 <span class="number">69E9</span>B07A A39ACCC0 F95F5410</div><div class="line"><span class="number">729</span>D5639 <span class="number">4</span>C37CECB B2522FB3 <span class="number">8</span>D37FDC1</div><div class="line"><span class="number">72899363</span> BBA441AC A5F47F08 <span class="number">6</span>CD3B3FE</div><div class="line">CEFB3783 B2E1BA96 <span class="number">71</span>AAF7B4 AFB61B1D</div><div class="line"><span class="number">0</span>CC513E7 <span class="number">52</span>FF2333 <span class="number">9</span>F726D2C CDE53B4A</div><div class="line"><span class="number">810</span>C0D4F E1F419A3 CDA0832B <span class="number">8440565</span>A</div><div class="line"><span class="number">35</span>BF00F6 <span class="number">4</span>CA9F869 ED10E245 <span class="number">469</span>C233E</div><div class="line">—— END LICENSE ——</div><div class="line"></div><div class="line">—– BEGIN LICENSE —–</div><div class="line">Anthony Sansone</div><div class="line">Single User License</div><div class="line">EA7E<span class="number">-878563</span></div><div class="line"><span class="number">28</span>B9A648 <span class="number">42</span>B99D8A F2E3E9E0 <span class="number">16</span>DE076E</div><div class="line">E218B3DC F3606379 C33C1526 E8B58964</div><div class="line">B2CB3F63 BDF901BE D31424D2 <span class="number">082891</span>B5</div><div class="line">F7058694 <span class="number">55</span>FA46D8 EFC11878 <span class="number">0868</span>F093</div><div class="line">B17CAFE7 <span class="number">63</span>A78881 <span class="number">86</span>B78E38 <span class="number">0</span>F146238</div><div class="line">BAE22DBB D4EC71A1 <span class="number">0</span>EC2E701 C7F9C648</div><div class="line"><span class="number">5</span>CF29CA3 <span class="number">1</span>CB14285 <span class="number">19</span>A46991 E9A98676</div><div class="line"><span class="number">14</span>FD4777 <span class="number">2</span>D8A0AB6 A444EE0D CA009B54</div><div class="line">—— END LICENSE ——</div><div class="line"></div><div class="line">—– BEGIN LICENSE —–</div><div class="line">Alexey Plutalov</div><div class="line">Single User License</div><div class="line">EA7E<span class="number">-860776</span></div><div class="line"><span class="number">3</span>DC19CC1 <span class="number">134</span>CDF23 <span class="number">504</span>DC871 <span class="number">2</span>DE5CE55</div><div class="line"><span class="number">585</span>DC8A6 <span class="number">253</span>BB0D9 <span class="number">637</span>C87A2 D8D0BA85</div><div class="line">AAE574AD BA7D6DA9 <span class="number">2</span>B9773F2 <span class="number">324</span>C5DEF</div><div class="line"><span class="number">17830</span>A4E FBCF9D1D <span class="number">182406E9</span> F883EA87</div><div class="line">E585BBA1 <span class="number">2538</span>C270 E2E857C2 <span class="number">194283</span>CA</div><div class="line"><span class="number">7234</span>FF9E D0392F93 <span class="number">1</span>D16E021 F1914917</div><div class="line"><span class="number">63909E12</span> <span class="number">203</span>C0169 <span class="number">3</span>F08FFC8 <span class="number">86</span>D06EA8</div><div class="line"><span class="number">73</span>DDAEF0 AC559F30 A6A67947 B60104C6</div><div class="line">—— END LICENSE ——</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Sublime </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rsync在Windows上同步本地文件夹的权限问题]]></title>
      <url>http://dannyhe.wang/2016/04/13/about-rsync/</url>
      <content type="html"><![CDATA[<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">rsync</span> <span class="literal">-</span><span class="comment">ravc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">exclude=</span><span class="string">.</span><span class="comment">DS_Store*</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">exclude=</span><span class="string">.</span><span class="comment">git/</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">exclude=</span><span class="string">.</span><span class="comment">gitignore</span> <span class="comment">源路径</span> <span class="comment">目标路径</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">delete</span><span class="literal">-</span><span class="comment">after</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">perms</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">chmod=a=rw</span><span class="string">,</span><span class="comment">Da</span><span class="literal">+</span><span class="comment">x</span></div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[对Android的Gradle插件的理解]]></title>
      <url>http://dannyhe.wang/2016/03/28/think-about-android-gradle/</url>
      <content type="html"><![CDATA[<p>本来打算写一篇关于Android的gradle插件的使用详解之类的文章,结果在知乎看到了一篇不错的。我在这里总结下吧。</p>
<p><a href="http://ghui.me/post/2015/03/create-several-variants" target="_blank" rel="external">http://ghui.me/post/2015/03/create-several-variants</a></p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ol>
<li><p>合并的思想</p>
<p>新的构建系统最主要的想法就是合并,将各自<code>Productflavor</code>定义的不同项目配置(applicationId,versionCode,signingConfig,sourceSets…)以及资源(java代码,AndroidManifest.xml,res,jni…)和公用的<code>defaultConfig</code>定义的配置、<code>sourceSets.main</code>定义的资源进行合并</p>
</li>
<li><p>applicationId和AndroidManifest.xml中的package</p>
<p>applicationId用来在Android设备和Google Play来区分apk,也就是以前的package.而现在AndroidManifest.xml中的package仅用来生成R.java</p>
</li>
<li><p>各自的Productflavor可以显式的设置sourceSets</p>
<p> 不要误以为每个Productflavor对应的java代码目录和资源目录是定死的,可以通过sourceSets.flavor来自定义,如果没有显式定义才是如上文中所说的路径.如:</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sourceSets<span class="selector-class">.flavor</span> &#123;</div><div class="line">       java<span class="selector-class">.srcDir</span> <span class="string">"src-flavor"</span></div><div class="line">       res<span class="selector-class">.srcDir</span> <span class="string">"res-flavor"</span></div><div class="line">       jniLibs<span class="selector-class">.srcDir</span> <span class="string">"libs-flavor"</span></div><div class="line">       manifest<span class="selector-class">.srcFile</span> <span class="string">"AndroidManifestflavor.xml"</span></div><div class="line">       assets<span class="selector-class">.srcDir</span> <span class="string">"assets-flavor"</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>各自的Productflavor下不要定义和<code>main</code>中同名的java类</p>
</li>
<li><p>packagingOptions的不足</p>
<p> packagingOptions虽然可以取消掉一些so文件的引用,但是暂时还不能做到对不同的<code>Productflavor</code>进行设置,可以通过第三方插件<a href="https://github.com/Jween/android-soexcluder" target="_blank" rel="external">https://github.com/Jween/android-soexcluder</a></p>
</li>
</ol>
<h3 id="自己的方案"><a href="#自己的方案" class="headerlink" title="自己的方案"></a>自己的方案</h3><p>  我采用的是同一份java代码,同一个静态库,不同的资源目录,不同的<code>AndroidManifest.xml</code>文件.java代码通过<code>ant</code>插件的宏定义分别生成不同的java代码(只是在编译时).这样就达到了灵活打包的特点,根据不同的宏定义定制出不同的apk,代码始终维护一份<br><a id="more"></a></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>  使用ant的插件<a href="http://antenna.sourceforge.net/wtkpreprocess.php" target="_blank" rel="external">antenna</a>,下载后将jar包放在项目目录下的<code>tools</code>目录中,然后在<code>build.gradle</code>中配置</p>
  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> FreeMarcos = <span class="string">"FREE_VERSION"</span></div><div class="line"><span class="keyword">ant</span>.properties[<span class="string">'wtk.home'</span>] = <span class="string">"tools"</span></div><div class="line"><span class="keyword">ant</span>.taskdef( name: <span class="string">"wtkpreprocess"</span>, classname: <span class="string">"de.pleumann.antenna.WtkPreprocess"</span>, <span class="keyword">classpath</span>:<span class="string">"../tools/antenna-bin-1.0.2.jar"</span>)</div><div class="line"><span class="keyword">task</span> PreprocessFree &#123;</div><div class="line">  inputs.dir <span class="string">"src"</span></div><div class="line">  outputs.dir <span class="string">"src"</span></div><div class="line">  <span class="keyword">doLast</span> &#123;</div><div class="line">      <span class="keyword">ant</span>.wtkpreprocess(</div><div class="line">          srcdir: <span class="string">"src"</span>,</div><div class="line">          destdir: <span class="string">"src"</span>, </div><div class="line">          verbose:<span class="keyword">true</span>,</div><div class="line">          printsymbols:<span class="keyword">true</span>,</div><div class="line">          debuglevel:<span class="string">"debug"</span>,</div><div class="line">          encoding:<span class="string">"UTF-8"</span>,</div><div class="line">          symbols:FreeMarcos</div><div class="line">      )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  也可以用ant的方式来配置,可以看<a href="http://dannyhe.wang/2016/01/31/use-ant-in-gradle">这篇文章</a></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>  比如在java代码里这样使用:</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//#ifdef FREE_VERSION</span></div><div class="line">        pay(<span class="number">0</span>);</div><div class="line"><span class="comment">//#else </span></div><div class="line">        pay(<span class="number">100.0</span>);</div><div class="line"><span class="comment">//#endif</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>  执行gradle task:<code>gradle PreprocessFree</code>,然后重新打开上面的代码文件,就能看见源码的变化了:)</p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>  将上面的<code>PreprocessFree</code>任务加到对应的<code>Productflavor</code>编译中,这样在我们每次执行<code>assemble</code>任务的时候,便会自动执行代码的生成任务。</p>
<p>  比如我定义的flavor为<code>free</code></p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">android<span class="selector-class">.applicationVariants</span><span class="selector-class">.all</span> &#123; variant -&gt;</div><div class="line">  variant<span class="selector-class">.productFlavors</span><span class="selector-class">.each</span> &#123; flavor -&gt;</div><div class="line">      <span class="keyword">if</span> (flavor<span class="selector-class">.name</span><span class="selector-class">.equals</span>(<span class="string">'free'</span>)) &#123;</div><div class="line">          variant<span class="selector-class">.javaCompile</span><span class="selector-class">.dependsOn</span>(PreprocessFree)</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  我们可以定义多个<code>flavor</code>和多个Preprocess任务,不同的<code>flavor</code>使用不同的java源码,这就实现了多个版本的需求，而且也不需要将源码分目录放了。<br>  happy coding :)</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
            <tag> Gradle </tag>
            
            <tag> Ant </tag>
            
            <tag> Antenna </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[谈谈next主题如何添加"Fork me on Github"]]></title>
      <url>http://dannyhe.wang/2016/03/12/github-link-with-next/</url>
      <content type="html"><![CDATA[<p>说说这个站点是如何添加”Fork me on Github”,如果只是简单的添加只需要参考<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="external">github的文档</a>,<br>将类似下面的代码添加到主题文件夹下<code>layout</code>文件夹下的<code>_layout.swig</code>文件中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/you"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"position: absolute; top: 0; left: 0; border: 0;"</span> <span class="attr">src</span>=<span class="string">"https://camo.githubusercontent.com/82b228a3648bf44fc1163ef44c62fcc60081495e/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f7265645f6161303030302e706e67"</span> <span class="attr">alt</span>=<span class="string">"Fork me on GitHub"</span> <span class="attr">data-canonical-src</span>=<span class="string">"https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>比如我的<code>github</code>地址为:<code>https://github.com/dannyjiajia</code><br>所以上面的代码改为:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/dannyjiajia"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"position: absolute; top: 0; left: 0; border: 0;"</span> <span class="attr">src</span>=<span class="string">"https://camo.githubusercontent.com/82b228a3648bf44fc1163ef44c62fcc60081495e/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f7265645f6161303030302e706e67"</span> <span class="attr">alt</span>=<span class="string">"Fork me on GitHub"</span> <span class="attr">data-canonical-src</span>=<span class="string">"https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>但是这样会有个问题：手机上的页面也会是这个效果,其他主题不知道，<code>next</code>主题会把页面的导航菜单给挡住。我这里采取的方式是只在<code>桌面版</code>的页面上添加。</strong></p>
<p><del>修改<code>/themes/next/source/js/src/schemes/pisces.js</code></del><br>其实可以统一修改这个文件:<code>/themes/next/source/js/src/motion.js</code></p>
<p>在<code>$(document).ready</code>函数内添加如下代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NexT.utils.isDesktop() &amp;&amp; $(<span class="built_in">document</span>.body).append(<span class="string">'这里粘贴你修改后的html代码'</span>);</div></pre></td></tr></table></figure>
<p>over~ 这样就只会在桌面版的网页内显示”Fork me on Github”</p>
]]></content>
      
        
        <tags>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[借图测试下效果]]></title>
      <url>http://dannyhe.wang/2016/03/11/group-picture-test/</url>
      <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/uploads/ZCogT10.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/uploads/menu-restaurant-vintage-tab.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/uploads/esWWGbF.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/uploads/24hrPQn.jpg" alt=""></div></div></div></div>]]></content>
      
        
        <tags>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最简单的方法将iOS中的NSLog写入文件]]></title>
      <url>http://dannyhe.wang/2016/01/31/simple-write-ios-log/</url>
      <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#ifdef DEBUG</span></div><div class="line">- (<span class="keyword">void</span>) redirectConsoleLogToDocumentFolder &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSArray</span> *paths = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</div><div class="line">    <span class="built_in">NSString</span> *documentsDirectory = [paths objectAtIndex:<span class="number">0</span>];</div><div class="line">    <span class="built_in">NSString</span> *logPath = [documentsDirectory stringByAppendingPathComponent:<span class="string">@"iOS.log"</span>];</div><div class="line">    freopen([logPath cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>],<span class="string">"a+"</span>,stderr);</div><div class="line">    <span class="built_in">NSDateFormatter</span> *formatter = [[<span class="built_in">NSDateFormatter</span> alloc]init];</div><div class="line">    [formatter setDateFormat:<span class="string">@"yyyy-MM-dd HH:mm:ss"</span>];</div><div class="line">    <span class="built_in">NSString</span> *time = [formatter stringFromDate:[<span class="built_in">NSDate</span> date]];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"-------------- Start Log [%@] --------------"</span>,time);</div><div class="line">    [formatter release];</div><div class="line">&#125;</div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
<p>在程序启动的时候调用即可,所有的NSLog日志都会记录到documents下的iOS.log内</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#ifdef DEBUG</span></div><div class="line">[<span class="keyword">self</span> redirectConsoleLogToDocumentFolder]; </div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何在window phone控制屏幕常亮]]></title>
      <url>http://dannyhe.wang/2016/01/31/request-display-always-in-wp/</url>
      <content type="html"><![CDATA[<p>在WindowPhone下禁用锁屏的事件</p>
<a id="more"></a>
<h3 id="定义工具类"><a href="#定义工具类" class="headerlink" title="定义工具类"></a>定义工具类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ref <span class="keyword">class</span> Device sealed</div><div class="line">&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	Device()&#123; m_requestActivd = <span class="literal">false</span>; &#125;;</div><div class="line">	Windows::System::Display::DisplayRequest^ m_display_request;</div><div class="line">	<span class="keyword">bool</span> m_requestActivd;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DisplayRequestActive</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (m_requestActivd) <span class="comment">//如果重复调用会抛出错误</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="literal">nullptr</span> == m_display_request)</div><div class="line">		&#123;</div><div class="line">			m_display_request = ref <span class="keyword">new</span> Windows::System::Display::DisplayRequest();</div><div class="line">		&#125;</div><div class="line">		m_display_request-&gt;RequestActive();</div><div class="line">		m_requestActivd = <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DisplayRequestRelease</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (!m_requestActivd)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="literal">nullptr</span> != m_display_request)</div><div class="line">		&#123;</div><div class="line">			m_display_request-&gt;RequestRelease();</div><div class="line">			m_requestActivd = <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">static</span> property Device^ Instance</div><div class="line">	&#123;</div><div class="line">		Device^ get()</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">static</span> Device^ instance = ref <span class="keyword">new</span> Device();</div><div class="line">			<span class="keyword">return</span> instance;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//屏幕常亮</span></div><div class="line">Device::Instance-&gt;DisplayRequestActive();</div><div class="line"><span class="comment">//关闭屏幕常亮</span></div><div class="line">Device::Instance-&gt;DisplayRequestRelease();</div></pre></td></tr></table></figure>
<p>over~~</p>
]]></content>
      
        
        <tags>
            
            <tag> Windows Phone </tag>
            
            <tag> Windows Mobile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在gradle脚本使用ant插件Antenna实现java的源代码宏编译]]></title>
      <url>http://dannyhe.wang/2016/01/31/use-ant-in-gradle/</url>
      <content type="html"><![CDATA[<p>还没怎么研究过android studio,以前一直习惯用eclipse+ant+adt开发android.但是看到很多第三方sdk都是发布aar这种包,如FB。真心不想费神去自己把它构建成eclipse项目。于是开始学习android studio…<br><a id="more"></a><br>直接上配置</p>
<p>app下的<code>build.gradle</code>:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ant<span class="selector-class">.importBuild</span> <span class="string">'../Antenna.xml'</span> <span class="comment">//导入ant配置</span></div><div class="line">preBuild.dependsOn(preprocess) <span class="comment">//构建依赖于preprocess任务</span></div></pre></td></tr></table></figure>
<p>然后新建<code>Antenna.xml</code>与<code>app</code>目录同级</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"Antenna"</span> <span class="attr">default</span>=<span class="string">"preprocess"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wtk.home"</span> <span class="attr">value</span>=<span class="string">"tools"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">taskdef</span> <span class="attr">resource</span>=<span class="string">"antenna.properties"</span> <span class="attr">classpath</span>=<span class="string">"tools/antenna-bin-1.0.2.jar"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"preprocess"</span> <span class="attr">description</span>=<span class="string">"preprocess java source code with marco in antenna_predefines.txt"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">wtkpreprocess</span></span></div><div class="line">			<span class="attr">verbose</span>=<span class="string">"true"</span></div><div class="line">			<span class="attr">srcdir</span>=<span class="string">"app/src/main/java"</span></div><div class="line">			<span class="attr">destdir</span>=<span class="string">"app/src/main/java"</span></div><div class="line">			<span class="attr">printsymbols</span>=<span class="string">"true"</span></div><div class="line">			<span class="attr">debuglevel</span>=<span class="string">"debug"</span></div><div class="line">			<span class="attr">encoding</span>=<span class="string">"UTF-8"</span>&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">symbols_file</span> <span class="attr">name</span>=<span class="string">"antenna_predefines.txt"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">wtkpreprocess</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然你需要在app同级目录建立文件夹<code>tools</code>,放入插件<code>Antenna</code>的jar包,其次你的环境变量中需要已经安装的<code>ant</code>环境<br>你还需要新建一个<code>antenna_predefines.txt</code>文件位于<code>app</code>文件夹的同级文件夹下,用来存放<code>Antenna</code>的宏定义</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
            <tag> Gradle </tag>
            
            <tag> Ant </tag>
            
            <tag> Antenna </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何在cmake里引用动态库的dll文件]]></title>
      <url>http://dannyhe.wang/2015/12/15/how-to-copy-file-in-cmake/</url>
      <content type="html"><![CDATA[<p>在vs里引用第三方动态库的时候需要用到dll文件,我们如何在cmake的脚本里定义自动拷贝.</p>
<p><a href="http://stackoverflow.com/questions/10671916/how-to-copy-dll-files-into-the-same-folder-as-the-executable-using-cmake" target="_blank" rel="external">http://stackoverflow.com/questions/10671916/how-to-copy-dll-files-into-the-same-folder-as-the-executable-using-cmake</a></p>
<p>下面是一个例子:<br><a id="more"></a><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># CompressETCTexture cmake file</span></div><div class="line"><span class="comment"># cmake -GXcode</span></div><div class="line"><span class="comment"># by dannyhe ver 0.0.1</span></div><div class="line"></div><div class="line"><span class="keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="number">2.6</span>)</div><div class="line"></div><div class="line"><span class="keyword">PROJECT</span>(CompressETCTexture)</div><div class="line"></div><div class="line"><span class="keyword">SET</span>(SRC_LIST main.cpp ETCCompress.cpp)</div><div class="line"></div><div class="line"><span class="keyword">ADD_EXECUTABLE</span>(CompressETCTexture <span class="variable">$&#123;SRC_LIST&#125;</span>)</div><div class="line"></div><div class="line"><span class="keyword">IF</span>(WIN32)  </div><div class="line">    <span class="keyword">MESSAGE</span>(STATUS <span class="string">"Use ZLIB 1.2.5 in zlib_win32"</span>)</div><div class="line">    <span class="keyword">INCLUDE_DIRECTORIES</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/zlib_win32/<span class="keyword">include</span>)</div><div class="line">	<span class="keyword">TARGET_LINK_LIBRARIES</span>(CompressETCTexture <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/zlib_win32/prebuilt/libzlib) </div><div class="line">	<span class="keyword">add_custom_command</span>(TARGET CompressETCTexture POST_BUILD COMMAND <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy_if_different <span class="string">"$&#123;PROJECT_SOURCE_DIR&#125;/zlib_win32/prebuilt/zlib1.dll"</span> <span class="string">"$&#123;CMAKE_CURRENT_BINARY_DIR&#125;"</span>)</div><div class="line"><span class="keyword">ELSE</span>(WIN32) </div><div class="line"><span class="keyword">FIND_PACKAGE</span>(zlib)</div><div class="line"><span class="keyword">IF</span>(ZLIB_FOUND)  </div><div class="line">	<span class="keyword">INCLUDE_DIRECTORIES</span>(<span class="variable">$&#123;ZLIB_INCLUDE_DIRS&#125;</span>)</div><div class="line">	<span class="keyword">TARGET_LINK_LIBRARIES</span>(CompressETCTexture <span class="variable">$&#123;ZLIB_LIBRARIES&#125;</span>) </div><div class="line"><span class="keyword">ELSE</span>(ZLIB_FOUND)  </div><div class="line">	<span class="keyword">MESSAGE</span>(FATAL_ERROR <span class="string">"ZLIB library not found"</span>)  </div><div class="line"><span class="keyword">ENDIF</span>(ZLIB_FOUND)  	</div><div class="line"><span class="keyword">ENDIF</span>(WIN32)</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Windows </tag>
            
            <tag> cmake </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python打印的一个例子]]></title>
      <url>http://dannyhe.wang/2015/12/11/python-logging/</url>
      <content type="html"><![CDATA[<p>用python肯定是为了跨平台的便利,用python时在不同平台打印需要注意的地方。</p>
<blockquote>
<p>Windows和mac的终端编码不一样,尤其是在打印中文的时候</p>
</blockquote>
<p>我采用的方法是在windows下将编码转换为gbk</p>
<blockquote>
<p>打印时候最好能加上颜色</p>
</blockquote>
<p>使用<code>colorama</code>这个库来实现<br><a id="more"></a></p>
<h3 id="对Logging的封装"><a href="#对Logging的封装" class="headerlink" title="对Logging的封装"></a>对Logging的封装</h3><figure class="highlight python"><figcaption><span>Logging.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># DannyHe</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> platform</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> *</div><div class="line">init(autoreset=<span class="keyword">True</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logging</span>:</span></div><div class="line"></div><div class="line">    DEBUG_MODE = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_print</span><span class="params">(s, color=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> sys.platform != <span class="string">'win32'</span>:</div><div class="line">            <span class="keyword">print</span> color + s</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> color + s.decode(<span class="string">'utf-8'</span>).encode(<span class="string">"GBK"</span>)</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(s)</span>:</span></div><div class="line">        <span class="keyword">if</span> Logging.DEBUG_MODE:</div><div class="line">            localtime = time.strftime(</div><div class="line">                <span class="string">"%a %H:%M:%S"</span>, time.localtime(time.time()))</div><div class="line">            Logging._print(<span class="string">"[DEBUG]%s %s "</span> % (localtime, s), Fore.RESET)</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(s)</span>:</span></div><div class="line">        localtime = time.strftime(<span class="string">"%a %H:%M:%S"</span>, time.localtime(time.time()))</div><div class="line">        Logging._print(<span class="string">"[INFO]%s %s "</span> % (localtime, s), Fore.CYAN)</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warning</span><span class="params">(s)</span>:</span></div><div class="line">        localtime = time.strftime(<span class="string">"%a %H:%M:%S"</span>, time.localtime(time.time()))</div><div class="line">        Logging._print(<span class="string">"[WARNING]%s %s "</span> % (localtime, s), Fore.YELLOW)</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(s)</span>:</span></div><div class="line">        localtime = time.strftime(<span class="string">"%a %H:%M:%S"</span>, time.localtime(time.time()))</div><div class="line">        Logging._print(<span class="string">"[ERROR]%s %s "</span> % (localtime, s), Fore.RED)</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight python"><figcaption><span>test.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># DannyHe</span></div><div class="line"><span class="keyword">from</span> Logging <span class="keyword">import</span> *</div><div class="line"></div><div class="line">Logging.DEBUG_MODE = <span class="keyword">True</span></div><div class="line"></div><div class="line">Logging.debug(<span class="string">"hello world"</span>)</div><div class="line">Logging.info(<span class="string">"你好"</span>)</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Cocos2dx </tag>
            
            <tag> Python </tag>
            
            <tag> Platform </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lua简单遍历字符串字符]]></title>
      <url>http://dannyhe.wang/2015/12/07/simple-foreach-lua-string/</url>
      <content type="html"><![CDATA[<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">string_foreach</span><span class="params">(str,func)</span></span></div><div class="line">    str:gsub(<span class="string">"."</span>, <span class="function"><span class="keyword">function</span><span class="params">(c)</span></span></div><div class="line">       func(c)</div><div class="line">    <span class="keyword">end</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> test = <span class="string">'abcd'</span></div><div class="line"></div><div class="line">string_foreach(test,<span class="function"><span class="keyword">function</span><span class="params">(char)</span></span></div><div class="line">	<span class="built_in">print</span>(char)</div><div class="line"><span class="keyword">end</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> lua </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio相关]]></title>
      <url>http://dannyhe.wang/2015/12/07/visual-studio/</url>
      <content type="html"><![CDATA[<h2 id="安装部分"><a href="#安装部分" class="headerlink" title="安装部分"></a>安装部分</h2><h3 id="VS2013序列号"><a href="#VS2013序列号" class="headerlink" title="VS2013序列号"></a>VS2013序列号</h3><pre><code>Visual Studio Ultimate 2013 KEY（密钥）：BWG7X-J98B3-W34RT-33B3R-JVYW9

Visual Studio Premium 2013 KEY（密钥）：FBJVC-3CMTX-D8DVP-RTQCT-92494

Visual Studio Professional 2013  KEY（密钥）： XDM3T-W3T3V-MGJWK-8BFVD-GVPKY

Team Foundation Server 2013 KEY（密钥）：MHG9J-HHHX9-WWPQP-D8T7H-7KCQG
</code></pre><h3 id="VS2015序列号"><a href="#VS2015序列号" class="headerlink" title="VS2015序列号"></a>VS2015序列号</h3><pre><code>专业版：HMGNV-WCYXV-X7G9W-YCX63-B98R2
企业版：HM6NR-QXX7C-DFW2Y-8B82K-WTYJV
</code></pre><a id="more"></a>
<h2 id="插件部分"><a href="#插件部分" class="headerlink" title="插件部分"></a>插件部分</h2><ol>
<li>vs2013可用插件<code>vs assist x</code></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Windows Phone </tag>
            
            <tag> Windows </tag>
            
            <tag> Windows Mobile </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
